/*
Copyright 2020 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
import { __decorate } from '/web-component-designer-demo/node_modules/tslib/tslib.es6.js';
import { html, SpectrumElement, } from '/web-component-designer-demo/node_modules/@spectrum-web-components/base/./src/index.js';
import { property } from '/web-component-designer-demo/node_modules/@spectrum-web-components/base/src/decorators.js';
import { FocusVisiblePolyfillMixin, ObserveSlotPresence, ObserveSlotText, } from '/web-component-designer-demo/node_modules/@spectrum-web-components/shared/./src/index.js';
import tabItemStyles from './tab.css.js';
/**
 * @element sp-tab
 *
 * @slot - text label of the Tab
 * @slot icon - The icon that appears on the left of the label
 */
export class Tab extends FocusVisiblePolyfillMixin(ObserveSlotText(ObserveSlotPresence(SpectrumElement, '[slot="icon"]'), '')) {
    constructor() {
        super(...arguments);
        this.disabled = false;
        this.label = '';
        this.selected = false;
        this.vertical = false;
        this.value = '';
    }
    static get styles() {
        return [tabItemStyles];
    }
    get hasIcon() {
        return this.slotContentIsPresent;
    }
    get hasLabel() {
        return !!this.label || this.slotHasContent;
    }
    handleContentChange() {
        /**
         * When the content in a tab has changed, JS powered layout related to that content may also need to be changed.
         */
        this.dispatchEvent(new Event('sp-tab-contentchange', {
            bubbles: true,
            composed: true,
        }));
    }
    render() {
        return html `
            ${this.hasIcon
            ? html `
                      <slot name="icon"></slot>
                  `
            : html ``}
            <label id="item-label" ?hidden=${!this.hasLabel}>
                ${this.slotHasContent ? html `` : this.label}
                <slot>${this.label}</slot>
            </label>
        `;
    }
    firstUpdated(changes) {
        super.firstUpdated(changes);
        this.setAttribute('role', 'tab');
        if (!this.hasAttribute('id')) {
            this.id = `sp-tab-${Tab.instanceCount++}`;
        }
        // @TODO - refactor this as a ResizeObserver up to `sp-tabs` so that it can be more
        // resiliant to Tab content changes, as well as other content slotted into the "tablist".
        this.shadowRoot.addEventListener('slotchange', this.handleContentChange);
    }
    updated(changes) {
        super.updated(changes);
        if (changes.has('label') &&
            typeof changes.get('label') !== 'undefined') {
            this.handleContentChange();
        }
        if (changes.has('selected')) {
            this.setAttribute('aria-selected', this.selected ? 'true' : 'false');
            this.setAttribute('tabindex', this.selected ? '0' : '-1');
        }
        if (changes.has('disabled')) {
            if (this.disabled) {
                this.setAttribute('aria-disabled', 'true');
            }
            else {
                this.removeAttribute('aria-disabled');
            }
        }
    }
}
/**
 * @private
 */
Tab.instanceCount = 0;
__decorate([
    property({ type: Boolean, reflect: true })
], Tab.prototype, "disabled", void 0);
__decorate([
    property({ reflect: true })
], Tab.prototype, "label", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], Tab.prototype, "selected", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], Tab.prototype, "vertical", void 0);
__decorate([
    property({ type: String, reflect: true })
], Tab.prototype, "value", void 0);
//# sourceMappingURL=Tab.js.map