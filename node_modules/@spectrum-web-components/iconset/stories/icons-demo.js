import { __decorate } from "tslib";
import { SpectrumElement, css, html, property, customElement, } from '@spectrum-web-components/base';
import '@spectrum-web-components/search/sp-search.js';
import '@spectrum-web-components/field-label/sp-field-label.js';
import bodyStyles from '@spectrum-web-components/styles/body.js';
import '@spectrum-web-components/icon/sp-icon.js';
let DelayedReady = class DelayedReady extends SpectrumElement {
    render() {
        return html `
            <slot @slotchange=${this.handleSlotchange}></slot>
        `;
    }
    firstUpdated() {
        this._delayedReady = new Promise((res) => (this._resolveDelayedReady = res));
    }
    async _getUpdateComplete() {
        await super._getUpdateComplete();
        await this._delayedReady;
    }
    handleSlotchange({ target, }) {
        if (target.assignedElements({ flatten: true }).length) {
            this._resolveDelayedReady();
        }
    }
};
DelayedReady = __decorate([
    customElement('delayed-ready')
], DelayedReady);
export { DelayedReady };
let IconsDemo = class IconsDemo extends SpectrumElement {
    constructor() {
        super();
        this.name = 'ui';
        this.size = 'm';
        this.search = '';
        this.icons = [];
        this.iconset = [];
        this.iconset = [];
        this.handleIconSetAdded = this.handleIconSetAdded.bind(this);
    }
    connectedCallback() {
        super.connectedCallback();
        window.addEventListener('sp-iconset-added', this.handleIconSetAdded);
    }
    disconnectedCallback() {
        window.removeEventListener('sp-iconset-added', this.handleIconSetAdded);
        super.disconnectedCallback();
    }
    handleIconSetAdded(event) {
        const { iconset } = event.detail;
        this.iconset = iconset.getIconList();
        this.requestUpdate();
    }
    static get styles() {
        return [
            ...bodyStyles,
            css `
                :host {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                    gap: 20px;
                }
                .icon {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    text-align: center;
                }
                sp-icon {
                    margin-bottom: 10px;
                }
                .search {
                    grid-column-start: 1;
                    grid-column-end: -1;
                }
            `,
        ];
    }
    updateSearch(event) {
        event.stopPropagation();
        this.search = event.target.value;
    }
    submit(event) {
        event.stopPropagation();
        this.updateSearch(event);
    }
    renderSearch() {
        const matchingIcons = this.search
            ? this.icons.filter((icon) => icon.name.toLowerCase().search(this.search) !== -1)
            : this.icons;
        return html `
            <div class="search">
                <sp-field-label for="search">Spectrum icons:</sp-field-label>
                <sp-search
                    id="search"
                    @keydown=${this.updateSearch}
                    @input=${this.updateSearch}
                    @submit=${this.submit}
                    .value=${this.search}
                    label="Search for icons"
                    autocomplete="off"
                ></sp-search>
                <p class="spectrum-Body spectrum-Body--sizeM">
                    Showing ${matchingIcons.length} of ${this.icons.length}
                    available icons.
                </p>
            </div>
            ${matchingIcons.map((icon) => {
            return html `
                    <bdo class="icon" dir="ltr" class="icon">
                        ${icon.story(this.size)} ${icon.tag}
                    </bdo>
                `;
        })}
        `;
    }
    render() {
        return html `
            ${this.icons.length
            ? this.renderSearch()
            : html `
                      <slot></slot>
                  `}
            ${this.iconset.map((icon) => html `
                    <bdo class="icon" dir="ltr">
                        <sp-icon
                            size="xl"
                            name=${`${this.name}:${icon}`}
                        ></sp-icon>
                        ${icon}
                    </bdo>
                `)}
        `;
    }
};
__decorate([
    property()
], IconsDemo.prototype, "name", void 0);
__decorate([
    property()
], IconsDemo.prototype, "size", void 0);
__decorate([
    property()
], IconsDemo.prototype, "search", void 0);
__decorate([
    property({ attribute: false })
], IconsDemo.prototype, "icons", void 0);
IconsDemo = __decorate([
    customElement('icons-demo')
], IconsDemo);
export { IconsDemo };
//# sourceMappingURL=icons-demo.js.map