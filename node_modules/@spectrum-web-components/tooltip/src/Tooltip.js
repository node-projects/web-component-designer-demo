/*
Copyright 2020 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
import { __decorate } from '/web-component-designer-demo/node_modules/tslib/tslib.es6.js';
import { html, SpectrumElement, } from '/web-component-designer-demo/node_modules/@spectrum-web-components/base/./src/index.js';
import { property, query, } from '/web-component-designer-demo/node_modules/@spectrum-web-components/base/src/decorators.js';
import { openOverlay } from '/web-component-designer-demo/node_modules/@spectrum-web-components/overlay/src/loader.js';
import tooltipStyles from './tooltip.css.js';
export class TooltipProxy extends HTMLElement {
    disconnectedCallback() {
        this.dispatchEvent(new Event('disconnected'));
    }
}
customElements.define('tooltip-proxy', TooltipProxy);
/**
 * @element sp-tooltip
 *
 * @slot icon - the icon element appearing at the start of the label
 * @slot - the text label of the Tooltip
 */
export class Tooltip extends SpectrumElement {
    constructor() {
        super();
        this._tooltipId = `sp-tooltip-describedby-helper-${Tooltip.instanceCount++}`;
        this.selfManaged = false;
        this.offset = 6;
        this.hadTooltipId = false;
        this.open = false;
        /**
         * @type {"auto" | "auto-start" | "auto-end" | "top" | "bottom" | "right" | "left" | "top-start" | "top-end" | "bottom-start" | "bottom-end" | "right-start" | "right-end" | "left-start" | "left-end" | "none"}
         * @attr
         */
        this.placement = 'top';
        /* Ensure that a '' value for `variant` removes the attribute instead of a blank value */
        this._variant = '';
        this.abortOverlay = () => {
            return;
        };
        this.openOverlay = () => {
            const parentElement = this.parentElement;
            const abortPromise = new Promise((res) => {
                this.abortOverlay = res;
            });
            this.closeOverlayCallback = openOverlay(parentElement, 'hover', this, {
                abortPromise,
                offset: this.offset,
                placement: this.placement,
            });
        };
        this.closeOverlay = async () => {
            if (this.abortOverlay)
                this.abortOverlay(true);
            if (!this.closeOverlayCallback)
                return;
            (await this.closeOverlayCallback)();
            delete this.closeOverlayCallback;
        };
        this.addEventListener('sp-overlay-query', this.onOverlayQuery);
    }
    static get styles() {
        return [tooltipStyles];
    }
    get variant() {
        return this._variant;
    }
    set variant(variant) {
        if (variant === this.variant) {
            return;
        }
        if (['info', 'positive', 'negative'].includes(variant)) {
            this.setAttribute('variant', variant);
            this._variant = variant;
            return;
        }
        this.removeAttribute('variant');
        this._variant = '';
    }
    onOverlayQuery(event) {
        /* c8 ignore next */
        if (!event.target)
            return;
        const target = event.target;
        /* c8 ignore next */
        if (target !== this)
            return;
        event.detail.overlayContentTipElement = this.tipElement;
    }
    generateProxy() {
        if (this._proxy) {
            return;
        }
        this._proxy = document.createElement('tooltip-proxy');
        this._proxy.id = this._tooltipId;
        this._proxy.hidden = true;
        this._proxy.slot = 'hidden-tooltip-content';
        this._proxy.setAttribute('role', 'tooltip');
        this._proxy.addEventListener('disconnected', this.closeOverlay);
    }
    overlayWillOpenCallback({ trigger, }) {
        this.setAttribute('aria-hidden', 'true');
        this.generateProxy();
        this._proxy.textContent = this.textContent;
        const ariaDescribedby = trigger.getAttribute('aria-describedby') || '';
        this.hadTooltipId = ariaDescribedby.search(this._tooltipId) > -1;
        this.insertAdjacentElement('beforebegin', this._proxy);
        if (this.hadTooltipId)
            return;
        if (ariaDescribedby) {
            trigger.setAttribute('aria-describedby', `${ariaDescribedby} ${this._tooltipId}`);
        }
        else {
            trigger.setAttribute('aria-describedby', `${this._tooltipId}`);
        }
    }
    overlayOpenCancelledCallback({ trigger, }) {
        this.overlayCloseCallback({ trigger });
    }
    overlayCloseCallback({ trigger }) {
        const ariaDescribedby = trigger.getAttribute('aria-describedby') || '';
        let descriptors = ariaDescribedby.split(/\s+/);
        if (!this.hadTooltipId) {
            descriptors = descriptors.filter((descriptor) => descriptor !== this._tooltipId);
        }
        if (descriptors.length) {
            trigger.setAttribute('aria-describedby', descriptors.join(' '));
        }
        else {
            trigger.removeAttribute('aria-describedby');
        }
        this.removeAttribute('aria-hidden');
        this.removeProxy();
    }
    removeProxy() {
        this._proxy.remove();
    }
    manageTooltip() {
        const parentElement = this.parentElement;
        if (this.selfManaged) {
            if (this.slot) {
                this.previousSlot = this.slot;
            }
            this.slot = 'self-managed-tooltip';
            parentElement.addEventListener('pointerenter', this.openOverlay);
            parentElement.addEventListener('focusin', this.openOverlay);
            parentElement.addEventListener('pointerleave', this.closeOverlay);
            parentElement.addEventListener('focusout', this.closeOverlay);
        }
        else {
            if (this.previousSlot) {
                this.slot = this.previousSlot;
            }
            else if (this.slot === 'self-managed-tooltip') {
                this.removeAttribute('slot');
            }
            parentElement.removeEventListener('pointerenter', this.openOverlay);
            parentElement.removeEventListener('focusin', this.openOverlay);
            parentElement.removeEventListener('pointerleave', this.closeOverlay);
            parentElement.removeEventListener('focusout', this.closeOverlay);
        }
    }
    render() {
        return html `
            <slot name="icon"></slot>
            <span id="label"><slot></slot></span>
            <span id="tip"></span>
        `;
    }
    async update(changed) {
        if (changed.has('open') && this.selfManaged) {
            if (this.open) {
                this.openOverlay();
            }
            else {
                this.closeOverlay();
            }
        }
        this.generateProxy();
        super.update(changed);
    }
    updated(changed) {
        super.updated(changed);
        if (changed.has('selfManaged')) {
            this.manageTooltip();
        }
    }
}
/**
 * @private
 */
Tooltip.instanceCount = 0;
__decorate([
    property({ type: Boolean, attribute: 'self-managed' })
], Tooltip.prototype, "selfManaged", void 0);
__decorate([
    property({ type: Number, reflect: true })
], Tooltip.prototype, "offset", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], Tooltip.prototype, "open", void 0);
__decorate([
    property({ reflect: true })
], Tooltip.prototype, "placement", void 0);
__decorate([
    query('#tip')
], Tooltip.prototype, "tipElement", void 0);
__decorate([
    property({ type: String })
], Tooltip.prototype, "variant", null);
//# sourceMappingURL=Tooltip.js.map