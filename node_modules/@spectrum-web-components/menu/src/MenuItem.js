/*
Copyright 2020 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
import { __decorate } from '/web-component-designer-demo/node_modules/tslib/tslib.es6.js';
import { html, } from '/web-component-designer-demo/node_modules/@spectrum-web-components/base/./src/index.js';
import { property, query, } from '/web-component-designer-demo/node_modules/@spectrum-web-components/base/src/decorators.js';
import '/web-component-designer-demo/node_modules/@spectrum-web-components/icons-ui/icons/sp-icon-checkmark100.js';
import { LikeAnchor } from '/web-component-designer-demo/node_modules/@spectrum-web-components/shared/src/like-anchor.js';
import { Focusable } from '/web-component-designer-demo/node_modules/@spectrum-web-components/shared/src/focusable.js';
import '/web-component-designer-demo/node_modules/@spectrum-web-components/icons-ui/icons/sp-icon-chevron100.js';
import chevronStyles from '/web-component-designer-demo/node_modules/@spectrum-web-components/icon/src/spectrum-icon-chevron.css.js';
import { openOverlay } from '/web-component-designer-demo/node_modules/@spectrum-web-components/overlay/src/loader.js';
import menuItemStyles from './menu-item.css.js';
import checkmarkStyles from '/web-component-designer-demo/node_modules/@spectrum-web-components/icon/src/spectrum-icon-checkmark.css.js';
import { reparentChildren } from '/web-component-designer-demo/node_modules/@spectrum-web-components/shared/src/reparent-children.js';
/**
 * Duration during which a pointing device can leave an `<sp-menu-item>` element
 * and return to it or to the submenu opened from it before closing that submenu.
 **/
const POINTERLEAVE_TIMEOUT = 100;
export class MenuItemRemovedEvent extends Event {
    constructor() {
        super('sp-menu-item-removed', {
            bubbles: true,
            composed: true,
        });
        this.focused = false;
    }
    get item() {
        return this._item;
    }
    reset(item) {
        this._item = item;
    }
}
export class MenuItemAddedOrUpdatedEvent extends Event {
    constructor() {
        super('sp-menu-item-added-or-updated', {
            bubbles: true,
            composed: true,
        });
    }
    set focusRoot(root) {
        this.item.menuData.focusRoot = this.item.menuData.focusRoot || root;
    }
    set selectionRoot(root) {
        this.item.menuData.selectionRoot =
            this.item.menuData.selectionRoot || root;
    }
    get item() {
        return this._item;
    }
    set currentAncestorWithSelects(ancestor) {
        this._currentAncestorWithSelects = ancestor;
    }
    get currentAncestorWithSelects() {
        return this._currentAncestorWithSelects;
    }
    reset(item) {
        this._item = item;
        this._currentAncestorWithSelects = undefined;
        item.menuData = {
            focusRoot: undefined,
            selectionRoot: undefined,
        };
    }
}
const addOrUpdateEvent = new MenuItemAddedOrUpdatedEvent();
const removeEvent = new MenuItemRemovedEvent();
/**
 * @element sp-menu-item
 *
 * @slot - text content to display within the Menu Item
 * @slot icon - icon element to be placed at the start of the Menu Item
 * @slot value - content placed at the end of the Menu Item like values, keyboard shortcuts, etc.
 * @fires sp-menu-item-added - announces the item has been added so a parent menu can take ownerships
 * @fires sp-menu-item-removed - announces when removed from the DOM so the parent menu can remove ownership and update selected state
 */
export class MenuItem extends LikeAnchor(Focusable) {
    constructor() {
        super();
        this.isInSubmenu = false;
        this.active = false;
        this.focused = false;
        this.selected = false;
        this._value = '';
        this.hasSubmenu = false;
        this.noWrap = false;
        this.open = false;
        /**
         * When there is a `change` event in the submenu for this item
         * then we "click" this item to cascade the selection up the
         * menu tree allowing all submenus between the initial selection
         * and the root of the tree to have their selection changes and
         * be closed.
         */
        this.handleSubmenuChange = () => {
            var _a;
            (_a = this.menuData.selectionRoot) === null || _a === void 0 ? void 0 : _a.selectOrToggleItem(this);
        };
        this.handleSubmenuPointerenter = () => {
            if (this.leaveTimeout) {
                clearTimeout(this.leaveTimeout);
                delete this.leaveTimeout;
            }
        };
        this.menuData = {
            focusRoot: undefined,
            selectionRoot: undefined,
        };
        this.proxyFocus = this.proxyFocus.bind(this);
        this.addEventListener('click', this.handleClickCapture, {
            capture: true,
        });
    }
    static get styles() {
        return [menuItemStyles, checkmarkStyles, chevronStyles];
    }
    get value() {
        return this._value || this.itemText;
    }
    set value(value) {
        if (value === this._value) {
            return;
        }
        this._value = value || '';
        if (this._value) {
            this.setAttribute('value', this._value);
        }
        else {
            this.removeAttribute('value');
        }
    }
    /**
     * @private
     */
    get itemText() {
        return this.itemChildren.content.reduce((acc, node) => acc + (node.textContent || '').trim(), '');
    }
    get focusElement() {
        return this;
    }
    get itemChildren() {
        if (this._itemChildren) {
            return this._itemChildren;
        }
        const iconSlot = this.shadowRoot.querySelector('slot[name="icon"]');
        const icon = !iconSlot
            ? []
            : iconSlot.assignedElements().map((element) => {
                const newElement = element.cloneNode(true);
                newElement.removeAttribute('slot');
                newElement.classList.toggle('icon');
                return newElement;
            });
        const contentSlot = this.shadowRoot.querySelector('slot:not([name])');
        const content = !contentSlot
            ? []
            : contentSlot.assignedNodes().map((node) => node.cloneNode(true));
        this._itemChildren = { icon, content };
        return this._itemChildren;
    }
    click() {
        if (this.disabled) {
            return;
        }
        if (this.shouldProxyClick()) {
            return;
        }
        super.click();
    }
    handleClickCapture(event) {
        if (this.disabled) {
            event.preventDefault();
            event.stopImmediatePropagation();
            event.stopPropagation();
            return false;
        }
    }
    proxyFocus() {
        this.focus();
    }
    shouldProxyClick() {
        let handled = false;
        if (this.anchorElement) {
            this.anchorElement.click();
            handled = true;
        }
        return handled;
    }
    breakItemChildrenCache() {
        this._itemChildren = undefined;
        this.triggerUpdate();
    }
    render() {
        return html `
            <slot name="icon" @slotchange=${this.breakItemChildrenCache}></slot>
            <div id="label">
                <slot
                    id="slot"
                    @slotchange=${this.breakItemChildrenCache}
                ></slot>
            </div>
            <slot name="value"></slot>
            ${this.selected
            ? html `
                      <sp-icon-checkmark100
                          id="selected"
                          class="spectrum-UIIcon-Checkmark100 icon checkmark"
                      ></sp-icon-checkmark100>
                  `
            : html ``}
            ${this.href && this.href.length > 0
            ? super.renderAnchor({
                id: 'button',
                ariaHidden: true,
                className: 'button anchor hidden',
            })
            : html ``}
            <slot
                hidden
                name="submenu"
                @slotchange=${this.manageSubmenu}
            ></slot>
            ${this.hasSubmenu
            ? html `
                      <sp-icon-chevron100
                          class="spectrum-UIIcon-ChevronRight100 chevron icon"
                      ></sp-icon-chevron100>
                  `
            : html ``}
        `;
    }
    manageSubmenu(event) {
        const assignedElements = event.target.assignedElements({
            flatten: true,
        });
        this.hasSubmenu = this.open || !!assignedElements.length;
    }
    handleRemoveActive(event) {
        if ((event.type === 'pointerleave' && this.hasSubmenu) ||
            this.hasSubmenu ||
            this.open) {
            return;
        }
        this.active = false;
    }
    handlePointerdown() {
        this.active = true;
    }
    firstUpdated(changes) {
        super.firstUpdated(changes);
        this.setAttribute('tabindex', '-1');
        this.addEventListener('pointerdown', this.handlePointerdown);
        if (!this.hasAttribute('id')) {
            this.id = `sp-menu-item-${MenuItem.instanceCount++}`;
        }
    }
    handleSubmenuClick() {
        this.openOverlay({ immediate: true });
    }
    handlePointerenter() {
        if (this.leaveTimeout) {
            clearTimeout(this.leaveTimeout);
            delete this.leaveTimeout;
            return;
        }
        this.openOverlay();
    }
    handlePointerleave() {
        if (this.hasSubmenu && this.open) {
            this.leaveTimeout = setTimeout(() => {
                delete this.leaveTimeout;
                if (this.closeOverlay)
                    this.closeOverlay(true);
            }, POINTERLEAVE_TIMEOUT);
        }
    }
    async openOverlay({ immediate, } = {}) {
        var _a;
        if (!this.hasSubmenu || this.open) {
            return;
        }
        this.open = true;
        this.active = true;
        const submenu = this.shadowRoot.querySelector('slot[name="submenu"]').assignedElements()[0];
        submenu.addEventListener('pointerenter', this.handleSubmenuPointerenter);
        submenu.addEventListener('change', this.handleSubmenuChange);
        const popover = document.createElement('sp-popover');
        const returnSubmenu = reparentChildren([submenu], popover, {
            position: 'beforeend',
            prepareCallback: (el) => {
                const slotName = el.slot;
                el.tabIndex = 0;
                el.removeAttribute('slot');
                return (el) => {
                    el.tabIndex = -1;
                    el.slot = slotName;
                };
            },
        });
        const closeOverlay = openOverlay(this, 'click', popover, {
            placement: this.isLTR ? 'right-start' : 'left-start',
            receivesFocus: 'auto',
            delayed: !immediate && false,
        });
        let closing = false;
        const closeSubmenu = async (leave = false) => {
            var _a;
            delete this.closeOverlay;
            if (submenu.hasOpenSubmenu) {
                await submenu.closeOpenSubmenu(leave);
            }
            if (!leave) {
                closing = true;
            }
            (_a = this.menuData.focusRoot) === null || _a === void 0 ? void 0 : _a.submenuWillCloseOn(this);
            (await closeOverlay)();
        };
        this.closeOverlay = closeSubmenu;
        if ((_a = this.menuData.focusRoot) === null || _a === void 0 ? void 0 : _a.hasOpenSubmenu) {
            this.menuData.focusRoot.closeOpenSubmenu(true);
        }
        const setup = () => {
            var _a;
            submenu.setCloseSelfAsSubmenu(closeSubmenu);
            (_a = this.menuData.focusRoot) === null || _a === void 0 ? void 0 : _a.setCloseOpenSubmenu(closeSubmenu);
        };
        const cleanup = (event) => {
            var _a, _b;
            event.stopPropagation();
            returnSubmenu();
            submenu.setCloseSelfAsSubmenu(closeSubmenu);
            (_a = this.menuData.focusRoot) === null || _a === void 0 ? void 0 : _a.setCloseOpenSubmenu(closeSubmenu);
            this.open = false;
            this.active = false;
            if (closing || event.detail.reason === 'external-click') {
                (_b = this.menuData.focusRoot) === null || _b === void 0 ? void 0 : _b.dispatchEvent(new CustomEvent('close', {
                    bubbles: true,
                    composed: true,
                    detail: { reason: 'external-click' },
                }));
            }
        };
        this.addEventListener('sp-opened', setup, {
            once: true,
        });
        this.addEventListener('sp-closed', cleanup, {
            once: true,
        });
    }
    updateAriaSelected() {
        const role = this.getAttribute('role');
        if (role === 'option') {
            this.setAttribute('aria-selected', this.selected ? 'true' : 'false');
        }
        else if (role === 'menuitemcheckbox' || role === 'menuitemradio') {
            this.setAttribute('aria-checked', this.selected ? 'true' : 'false');
        }
    }
    setRole(role) {
        this.setAttribute('role', role);
        this.updateAriaSelected();
    }
    updated(changes) {
        super.updated(changes);
        if (changes.has('label')) {
            this.setAttribute('aria-label', this.label || '');
        }
        if (changes.has('active')) {
            if (this.active) {
                this.addEventListener('pointerup', this.handleRemoveActive);
                this.addEventListener('pointerleave', this.handleRemoveActive);
            }
            else {
                this.removeEventListener('pointerup', this.handleRemoveActive);
                this.removeEventListener('pointerleave', this.handleRemoveActive);
            }
        }
        if (this.anchorElement) {
            this.anchorElement.addEventListener('focus', this.proxyFocus);
            this.anchorElement.tabIndex = -1;
        }
        if (changes.has('selected')) {
            this.updateAriaSelected();
        }
        if (changes.has('hasSubmenu')) {
            if (this.hasSubmenu) {
                this.addEventListener('click', this.handleSubmenuClick);
                this.addEventListener('pointerenter', this.handlePointerenter);
                this.addEventListener('pointerleave', this.handlePointerleave);
            }
            else if (!this.closeOverlay) {
                this.removeEventListener('click', this.handleSubmenuClick);
                this.removeEventListener('pointerenter', this.handlePointerenter);
                this.removeEventListener('pointerleave', this.handlePointerleave);
            }
        }
    }
    connectedCallback() {
        super.connectedCallback();
        this.isInSubmenu = !!this.closest('[slot="submenu"]');
        if (this.isInSubmenu) {
            return;
        }
        addOrUpdateEvent.reset(this);
        this.dispatchEvent(addOrUpdateEvent);
        this._parentElement = this.parentElement;
    }
    disconnectedCallback() {
        var _a;
        removeEvent.reset(this);
        if (!this.isInSubmenu) {
            (_a = this._parentElement) === null || _a === void 0 ? void 0 : _a.dispatchEvent(removeEvent);
        }
        this.isInSubmenu = false;
        super.disconnectedCallback();
    }
    async triggerUpdate() {
        if (this.isInSubmenu) {
            return;
        }
        await new Promise((ready) => requestAnimationFrame(ready));
        addOrUpdateEvent.reset(this);
        this.dispatchEvent(addOrUpdateEvent);
    }
}
MenuItem.instanceCount = 0;
__decorate([
    property({ type: Boolean, reflect: true })
], MenuItem.prototype, "active", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MenuItem.prototype, "focused", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MenuItem.prototype, "selected", void 0);
__decorate([
    property({ type: String })
], MenuItem.prototype, "value", null);
__decorate([
    property({ type: Boolean })
], MenuItem.prototype, "hasSubmenu", void 0);
__decorate([
    property({
        type: Boolean,
        reflect: true,
        attribute: 'no-wrap',
        hasChanged() {
            return false;
        },
    })
], MenuItem.prototype, "noWrap", void 0);
__decorate([
    query('.anchor')
], MenuItem.prototype, "anchorElement", void 0);
__decorate([
    property({ type: Boolean })
], MenuItem.prototype, "open", void 0);
//# sourceMappingURL=MenuItem.js.map