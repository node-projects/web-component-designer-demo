/*
Copyright 2020 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
import { __decorate } from '/web-component-designer-demo/node_modules/tslib/tslib.es6.js';
import { html, SizedMixin, } from '/web-component-designer-demo/node_modules/@spectrum-web-components/base/./src/index.js';
import { property, query, } from '/web-component-designer-demo/node_modules/@spectrum-web-components/base/src/decorators.js';
import { ifDefined } from '/web-component-designer-demo/node_modules/@spectrum-web-components/base/src/directives.js';
import '/web-component-designer-demo/node_modules/@spectrum-web-components/popover/sp-popover.js';
import '/web-component-designer-demo/node_modules/@spectrum-web-components/menu/sp-menu.js';
import '/web-component-designer-demo/node_modules/@spectrum-web-components/button/sp-button.js';
import { PickerBase } from '/web-component-designer-demo/node_modules/@spectrum-web-components/picker/src/index.js';
import '/web-component-designer-demo/node_modules/@spectrum-web-components/icons-ui/icons/sp-icon-chevron100.js';
import '/web-component-designer-demo/node_modules/@spectrum-web-components/icons-workflow/icons/sp-icon-more.js';
import chevronStyles from '/web-component-designer-demo/node_modules/@spectrum-web-components/icon/src/spectrum-icon-chevron.css.js';
import styles from './split-button.css.js';
const chevronClass = {
    s: 'spectrum-UIIcon-ChevronDown75',
    m: 'spectrum-UIIcon-ChevronDown100',
    l: 'spectrum-UIIcon-ChevronDown200',
    xl: 'spectrum-UIIcon-ChevronDown300',
};
/**
 * @element sp-split-button
 *
 * @slot - menu items to be listed in the Button
 **/
export class SplitButton extends SizedMixin(PickerBase) {
    constructor() {
        super(...arguments);
        this.left = false;
        /**
         * The visual variant to apply to this button.
         */
        this.variant = 'cta';
        this.type = 'field';
        this.listRole = 'menu';
        this.itemRole = 'menuitem';
    }
    static get styles() {
        return [styles, chevronStyles];
    }
    get target() {
        return this;
    }
    get focusElement() {
        if (this.open) {
            return this.optionsMenu;
        }
        if (this.left) {
            return this.trigger;
        }
        return this.button;
    }
    sizePopover(popover) {
        popover.style.setProperty('min-width', `${this.offsetWidth}px`);
    }
    passClick() {
        const target = this.type === 'more'
            ? this.menuItems[0]
            : this.selectedItem || this.menuItems[0];
        if (target) {
            target.click();
        }
    }
    get buttonContent() {
        var _a;
        return [
            html `
                <div
                    id="label"
                    role="presentation"
                    class=${ifDefined(this.value ? undefined : 'placeholder')}
                >
                    ${((_a = this.selectedItem) === null || _a === void 0 ? void 0 : _a.itemText) || ''}
                </div>
            `,
        ];
    }
    update(changes) {
        if (changes.has('type')) {
            if (this.type === 'more') {
                this.selects = undefined;
            }
            else {
                this.selects = 'single';
            }
        }
        super.update(changes);
    }
    render() {
        const buttons = [
            html `
                <sp-button
                    aria-label=${ifDefined(this.label || undefined)}
                    id="button"
                    class="button ${this.variant}"
                    @click=${this.passClick}
                    ?disabled=${this.disabled}
                    variant=${this.variant}
                    size=${this.size}
                >
                    ${this.buttonContent}
                </sp-button>
            `,
            html `
                <sp-button
                    aria-haspopup="true"
                    aria-expanded=${this.open ? 'true' : 'false'}
                    class="button trigger ${this.variant}"
                    @blur=${this.onButtonBlur}
                    @click=${this.onButtonClick}
                    @focus=${this.onButtonFocus}
                    ?disabled=${this.disabled}
                    aria-label="More"
                    variant=${this.variant}
                    size=${this.size}
                >
                    ${this.type === 'field'
                ? html `
                              <sp-icon-chevron100
                                  class="icon ${chevronClass[this.size]}"
                              ></sp-icon-chevron100>
                          `
                : html `
                              <sp-icon-more class="icon"></sp-icon-more>
                          `}
                </sp-button>
            `,
        ];
        if (this.left) {
            buttons.reverse();
        }
        return html `
            ${buttons}
        `;
    }
    updated(changedProperties) {
        super.updated(changedProperties);
        if (changedProperties.has('value')) {
            this.manageSplitButtonItems();
        }
    }
    manageSelection() {
        super.manageSelection();
        this.manageSplitButtonItems();
    }
    async manageSplitButtonItems() {
        if (this.menuItems.length) {
            if (this.type === 'more') {
                this.menuItems[0].hidden = true;
                this.menuItems.forEach((el) => (el.selected = false));
                this.selectedItem = this.menuItems[0];
            }
            else {
                this.selectedItem = this.selectedItem || this.menuItems[0];
            }
            this.value = this.selectedItem.value;
            return;
        }
        await this.updateComplete;
        if (this.menuItems.length) {
            this.manageSplitButtonItems();
        }
    }
}
__decorate([
    property({ type: Boolean, reflect: true })
], SplitButton.prototype, "left", void 0);
__decorate([
    property({ reflect: true })
], SplitButton.prototype, "variant", void 0);
__decorate([
    property({ type: String })
], SplitButton.prototype, "type", void 0);
__decorate([
    query('.trigger')
], SplitButton.prototype, "trigger", void 0);
//# sourceMappingURL=SplitButton.js.map