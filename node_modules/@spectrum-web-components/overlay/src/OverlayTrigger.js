/*
Copyright 2020 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var _a;
import { __decorate } from '/web-component-designer-demo/node_modules/tslib/tslib.es6.js';
import { html, SpectrumElement, } from '/web-component-designer-demo/node_modules/@spectrum-web-components/base/./src/index.js';
import { property, state, } from '/web-component-designer-demo/node_modules/@spectrum-web-components/base/src/decorators.js';
import { firstFocusableIn } from '/web-component-designer-demo/node_modules/@spectrum-web-components/shared/src/first-focusable-in.js';
import { isAndroid, isIOS, } from '/web-component-designer-demo/node_modules/@spectrum-web-components/shared/src/platform.js';
import { openOverlay } from './loader.js';
import overlayTriggerStyles from './overlay-trigger.css.js';
export const LONGPRESS_INSTRUCTIONS = {
    touch: 'Double tap and long press for additional options',
    keyboard: 'Press Space or Alt+Down Arrow for additional options',
    mouse: 'Click and hold for additional options',
};
/**
 * @element overlay-trigger
 *
 * @slot trigger - The content that will trigger the various overlays
 * @slot hover-content - The content that will be displayed on hover
 * @slot click-content - The content that will be displayed on click
 * @slot longpress-content - The content that will be displayed on click
 *
 * @fires sp-opened - Announces that the overlay has been opened
 * @fires sp-closed - Announces that the overlay has been closed
 */
export class OverlayTrigger extends SpectrumElement {
    constructor() {
        super(...arguments);
        /**
         * @type {"auto" | "auto-start" | "auto-end" | "top" | "bottom" | "right" | "left" | "top-start" | "top-end" | "bottom-start" | "bottom-end" | "right-start" | "right-end" | "left-start" | "left-end" | "none"}
         * @attr
         */
        this.placement = 'bottom';
        this.offset = 6;
        this.disabled = false;
        this.hasLongpressContent = false;
        this._longpressId = `longpress-describedby-descriptor`;
        this.abortOverlay = () => {
            return;
        };
        this.openStatePromise = Promise.resolve();
    }
    static get styles() {
        return [overlayTriggerStyles];
    }
    handleClose(event) {
        if (event &&
            event.detail.interaction !== this.open &&
            event.detail.interaction !== this.type) {
            return;
        }
        this.removeAttribute('open');
    }
    render() {
        // Keyboard event availability documented in README.md
        /* eslint-disable lit-a11y/click-events-have-key-events */
        return html `
            <slot
                id="trigger"
                @click=${this.onTrigger}
                @longpress=${this.onTrigger}
                @mouseenter=${this.onTrigger}
                @mouseleave=${this.onTrigger}
                @focusin=${this.onTrigger}
                @focusout=${this.onTrigger}
                @sp-closed=${this.handleClose}
                @slotchange=${this.onTargetSlotChange}
                name="trigger"
            ></slot>
            <div id="overlay-content">
                <slot
                    @slotchange=${this.onClickSlotChange}
                    name="click-content"
                ></slot>
                <slot
                    @slotchange=${this.onLongpressSlotChange}
                    name="longpress-content"
                ></slot>
                <slot
                    @slotchange=${this.onHoverSlotChange}
                    name="hover-content"
                ></slot>
                <slot name=${this._longpressId}></slot>
            </div>
        `;
        /* eslint-enable lit-a11y/click-events-have-key-events */
    }
    updated(changes) {
        super.updated(changes);
        if (this.disabled && changes.has('disabled')) {
            this.closeAllOverlays();
            return;
        }
        if (changes.has('open')) {
            this.manageOpen();
        }
        if (changes.has('hasLongpressContent')) {
            this.manageLongpressDescriptor();
        }
    }
    manageLongpressDescriptor() {
        const trigger = this.querySelector('[slot="trigger"]');
        const ariaDescribedby = trigger.getAttribute('aria-describedby');
        let descriptors = ariaDescribedby ? ariaDescribedby.split(/\s+/) : [];
        if (this.hasLongpressContent) {
            if (!this.longpressDescriptor) {
                this.longpressDescriptor = document.createElement('div');
                this.longpressDescriptor.id = this._longpressId;
                this.longpressDescriptor.slot = this._longpressId;
            }
            const messageType = isIOS() || isAndroid() ? 'touch' : 'keyboard';
            this.longpressDescriptor.textContent =
                LONGPRESS_INSTRUCTIONS[messageType];
            this.appendChild(this.longpressDescriptor);
            descriptors.push(this._longpressId);
        }
        else {
            if (this.longpressDescriptor)
                this.longpressDescriptor.remove();
            descriptors = descriptors.filter((descriptor) => descriptor !== this._longpressId);
        }
        if (descriptors.length) {
            trigger.setAttribute('aria-describedby', descriptors.join(' '));
        }
        else {
            trigger.removeAttribute('aria-describedby');
        }
    }
    closeAllOverlays() {
        if (this.abortOverlay)
            this.abortOverlay(true);
        [
            'closeClickOverlay',
            'closeHoverOverlay',
            'closeLongpressOverlay',
        ].forEach(async (name) => {
            const canClose = this[name];
            if (canClose == null)
                return;
            delete this[name];
            (await canClose)();
        });
    }
    manageOpen() {
        var _b;
        const openHandlers = {
            click: () => this.onTriggerClick(),
            hover: () => this.onTriggerMouseEnter(),
            longpress: () => this.onTriggerLongpress(),
            none: () => this.closeAllOverlays(),
        };
        openHandlers[(_b = this.open) !== null && _b !== void 0 ? _b : 'none']();
    }
    async openOverlay(target, interaction, content, options) {
        this.openStatePromise = new Promise((res) => (this.openStateResolver = res));
        this.addEventListener('sp-opened', () => {
            this.openStateResolver();
        }, { once: true });
        return OverlayTrigger.openOverlay(target, interaction, content, options);
    }
    get overlayOptions() {
        return {
            offset: this.offset,
            placement: this.placement,
            receivesFocus: !this.type || this.type === 'inline' || this.open === 'hover'
                ? undefined
                : 'auto',
        };
    }
    onTrigger(event) {
        if (this.disabled)
            return;
        switch (event.type) {
            case 'mouseenter':
            case 'focusin':
                if (!this.open && this.hoverContent) {
                    this.open = 'hover';
                }
                return;
            case 'mouseleave':
            case 'focusout':
                if (this.open === 'hover') {
                    this.handleClose();
                }
                return;
            case 'click':
                if (this.clickContent) {
                    this.open = event.type;
                }
                else if (this.closeHoverOverlay) {
                    event.preventDefault();
                }
                return;
            case 'longpress':
                if (this.longpressContent) {
                    this._longpressEvent = event;
                    this.open = event.type;
                }
                return;
        }
    }
    prepareToFocusOverlayContent(overlayContent) {
        if (this.type !== 'modal') {
            return;
        }
        const firstFocusable = firstFocusableIn(overlayContent);
        if (!firstFocusable) {
            overlayContent.tabIndex = 0;
        }
    }
    async onTriggerClick() {
        if (!this.targetContent ||
            !this.clickContent ||
            this.closeClickOverlay) {
            return;
        }
        const { targetContent, clickContent } = this;
        this.closeAllOverlays();
        this.prepareToFocusOverlayContent(clickContent);
        this.closeClickOverlay = this.openOverlay(targetContent, this.type ? this.type : 'click', clickContent, this.overlayOptions);
    }
    async onTriggerLongpress() {
        var _b, _c;
        if (!this.targetContent ||
            !this.longpressContent ||
            this.closeLongpressOverlay) {
            return;
        }
        const { targetContent, longpressContent } = this;
        this.closeAllOverlays();
        this.prepareToFocusOverlayContent(longpressContent);
        const notImmediatelyClosable = ((_c = (_b = this._longpressEvent) === null || _b === void 0 ? void 0 : _b.detail) === null || _c === void 0 ? void 0 : _c.source) !== 'keyboard';
        this.closeLongpressOverlay = this.openOverlay(targetContent, this.type ? this.type : 'longpress', longpressContent, Object.assign(Object.assign({}, this.overlayOptions), { receivesFocus: 'auto', notImmediatelyClosable }));
        this._longpressEvent = undefined;
    }
    async onTriggerMouseEnter() {
        if (!this.targetContent ||
            !this.hoverContent ||
            this.closeHoverOverlay) {
            return;
        }
        const abortPromise = new Promise((res) => {
            this.abortOverlay = res;
        });
        const { targetContent, hoverContent } = this;
        this.closeHoverOverlay = this.openOverlay(targetContent, 'hover', hoverContent, Object.assign({ abortPromise }, this.overlayOptions));
    }
    onClickSlotChange(event) {
        this.clickContent = this.extractSlotContentFromEvent(event);
        this.manageOpen();
    }
    onLongpressSlotChange(event) {
        this.longpressContent = this.extractSlotContentFromEvent(event);
        this.hasLongpressContent =
            !!this.longpressContent || !!this.closeLongpressOverlay;
        this.manageOpen();
    }
    onHoverSlotChange(event) {
        this.hoverContent = this.extractSlotContentFromEvent(event);
        this.manageOpen();
    }
    onTargetSlotChange(event) {
        this.targetContent = this.extractSlotContentFromEvent(event);
    }
    extractSlotContentFromEvent(event) {
        const slot = event.target;
        const nodes = slot.assignedNodes({ flatten: true });
        return nodes.find((node) => node instanceof HTMLElement);
    }
    async getUpdateComplete() {
        const complete = (await super.getUpdateComplete());
        await this.openStatePromise;
        return complete;
    }
    disconnectedCallback() {
        this.closeAllOverlays();
        super.disconnectedCallback();
    }
}
_a = OverlayTrigger;
OverlayTrigger.openOverlay = async (target, interaction, content, options) => {
    return openOverlay(target, interaction, content, options);
};
__decorate([
    property({ reflect: true })
], OverlayTrigger.prototype, "placement", void 0);
__decorate([
    property()
], OverlayTrigger.prototype, "type", void 0);
__decorate([
    property({ type: Number, reflect: true })
], OverlayTrigger.prototype, "offset", void 0);
__decorate([
    property({ reflect: true })
], OverlayTrigger.prototype, "open", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], OverlayTrigger.prototype, "disabled", void 0);
__decorate([
    state()
], OverlayTrigger.prototype, "hasLongpressContent", void 0);
//# sourceMappingURL=OverlayTrigger.js.map