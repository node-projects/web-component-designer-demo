/*
Copyright 2020 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
import { __decorate } from '/web-component-designer-demo/node_modules/tslib/tslib.es6.js';
import { html, SpectrumElement, } from '/web-component-designer-demo/node_modules/@spectrum-web-components/base/./src/index.js';
import { property, query, } from '/web-component-designer-demo/node_modules/@spectrum-web-components/base/src/decorators.js';
import { ifDefined } from '/web-component-designer-demo/node_modules/@spectrum-web-components/base/src/directives.js';
import '/web-component-designer-demo/node_modules/@spectrum-web-components/underlay/sp-underlay.js';
import '/web-component-designer-demo/node_modules/@spectrum-web-components/button/sp-button.js';
import '../sp-dialog.js';
import modalWrapperStyles from '/web-component-designer-demo/node_modules/@spectrum-web-components/modal/src/modal-wrapper.css.js';
import modalStyles from '/web-component-designer-demo/node_modules/@spectrum-web-components/modal/src/modal.css.js';
import { FocusVisiblePolyfillMixin } from '/web-component-designer-demo/node_modules/@spectrum-web-components/shared/./src/index.js';
import { firstFocusableIn } from '/web-component-designer-demo/node_modules/@spectrum-web-components/shared/src/first-focusable-in.js';
/**
 * @element sp-dialog-wrapper
 *
 * @slot - content for the dialog
 * @fires secondary - Announces that the "secondary" button has been clicked.
 * @fires cancel - Announces that the "cancel" button has been clicked.
 * @fires confirm - Announces that the "confirm" button has been clicked.
 * @fires close - Announces that the dialog has been closed.
 */
export class DialogWrapper extends FocusVisiblePolyfillMixin(SpectrumElement) {
    constructor() {
        super(...arguments);
        this.error = false;
        this.cancelLabel = '';
        this.confirmLabel = '';
        this.dismissable = false;
        this.footer = '';
        this.hero = '';
        this.heroLabel = '';
        this.noDivider = false;
        this.open = false;
        this.secondaryLabel = '';
        this.headline = '';
        this.responsive = false;
        this.transitionPromise = Promise.resolve();
        this.underlay = false;
    }
    static get styles() {
        return [modalWrapperStyles, modalStyles];
    }
    focus() {
        if (this.shadowRoot) {
            const firstFocusable = firstFocusableIn(this.dialog);
            if (firstFocusable) {
                if (firstFocusable.updateComplete) {
                    firstFocusable.updateComplete.then(() => firstFocusable.focus());
                    /* c8 ignore next 3 */
                }
                else {
                    firstFocusable.focus();
                }
                this.removeAttribute('tabindex');
            }
            else {
                this.dialog.focus();
            }
            /* c8 ignore next 3 */
        }
        else {
            super.focus();
        }
    }
    overlayWillCloseCallback() {
        if (!this.open)
            return false;
        this.close();
        return true;
    }
    dismiss() {
        if (!this.dismissable) {
            return;
        }
        this.close();
    }
    clickSecondary() {
        this.dispatchEvent(new Event('secondary', {
            bubbles: true,
        }));
    }
    clickCancel() {
        this.dispatchEvent(new Event('cancel', {
            bubbles: true,
        }));
    }
    clickConfirm() {
        this.dispatchEvent(new Event('confirm', {
            bubbles: true,
        }));
    }
    handleClose(event) {
        event.stopPropagation();
        this.close();
    }
    close() {
        this.open = false;
    }
    dispatchClosed() {
        this.dispatchEvent(new Event('close', {
            bubbles: true,
        }));
    }
    handleUnderlayTransitionend() {
        if (!this.open) {
            this.dispatchClosed();
            this.resolveTransitionPromise();
        }
    }
    handleModalTransitionend() {
        if (this.open || !this.underlay) {
            this.resolveTransitionPromise();
            if (!this.open) {
                this.dispatchClosed();
            }
        }
    }
    update(changes) {
        if (changes.has('open') && changes.get('open') !== undefined) {
            this.transitionPromise = new Promise((res) => (this.resolveTransitionPromise = res));
        }
        super.update(changes);
    }
    render() {
        return html `
            ${this.underlay
            ? html `
                      <sp-underlay
                          ?open=${this.open}
                          @click=${this.dismiss}
                          @transitionend=${this.handleUnderlayTransitionend}
                      ></sp-underlay>
                  `
            : html ``}
            <div
                class="modal ${this.mode}"
                @transitionend=${this.handleModalTransitionend}
            >
                <sp-dialog
                    ?dismissable=${this.dismissable}
                    ?no-divider=${this.noDivider}
                    ?error=${this.error}
                    mode=${ifDefined(this.mode ? this.mode : undefined)}
                    size=${ifDefined(this.size ? this.size : undefined)}
                    @close=${this.handleClose}
                >
                    ${this.hero
            ? html `
                              <img
                                  src="${this.hero}"
                                  slot="hero"
                                  aria-hidden=${ifDefined(this.heroLabel ? undefined : 'true')}
                                  alt=${ifDefined(this.heroLabel
                ? this.heroLabel
                : undefined)}
                              />
                          `
            : html ``}
                    ${this.headline
            ? html `
                              <h2 slot="heading">${this.headline}</h2>
                          `
            : html ``}
                    <slot></slot>
                    ${this.footer
            ? html `
                              <div slot="footer">${this.footer}</div>
                          `
            : html ``}
                    ${this.secondaryLabel
            ? html `
                              <sp-button
                                  variant="primary"
                                  slot="button"
                                  @click=${this.clickSecondary}
                              >
                                  ${this.secondaryLabel}
                              </sp-button>
                          `
            : html ``}
                    ${this.cancelLabel
            ? html `
                              <sp-button
                                  variant="secondary"
                                  slot="button"
                                  @click=${this.clickCancel}
                              >
                                  ${this.cancelLabel}
                              </sp-button>
                          `
            : html ``}
                    ${this.confirmLabel
            ? html `
                              <sp-button
                                  variant="cta"
                                  slot="button"
                                  @click=${this.clickConfirm}
                              >
                                  ${this.confirmLabel}
                              </sp-button>
                          `
            : html ``}
                </sp-dialog>
            </div>
        `;
    }
    updated(changes) {
        if (changes.has('open')) {
            if (this.open) {
                this.dialog.updateComplete.then(() => {
                    this.dialog.shouldManageTabOrderForScrolling();
                });
            }
            else {
                this.tabIndex = 0;
            }
        }
    }
    /**
     * Bind the open/close transition into the update complete lifecycle so
     * that the overlay system can wait for it to be "visibly ready" before
     * attempting to throw focus into the content contained herein. Not
     * waiting for this can cause small amounts of page scroll to happen
     * while opening the Tray when focusable content is included: e.g. Menu
     * elements whose selected Menu Item is not the first Menu Item.
     */
    async getUpdateComplete() {
        const complete = (await super.getUpdateComplete());
        await this.transitionPromise;
        return complete;
    }
}
__decorate([
    property({ type: Boolean, reflect: true })
], DialogWrapper.prototype, "error", void 0);
__decorate([
    property({ attribute: 'cancel-label' })
], DialogWrapper.prototype, "cancelLabel", void 0);
__decorate([
    property({ attribute: 'confirm-label' })
], DialogWrapper.prototype, "confirmLabel", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], DialogWrapper.prototype, "dismissable", void 0);
__decorate([
    property()
], DialogWrapper.prototype, "footer", void 0);
__decorate([
    property()
], DialogWrapper.prototype, "hero", void 0);
__decorate([
    property({ attribute: 'hero-label' })
], DialogWrapper.prototype, "heroLabel", void 0);
__decorate([
    property({ type: Boolean, reflect: true, attribute: 'no-divider' })
], DialogWrapper.prototype, "noDivider", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], DialogWrapper.prototype, "open", void 0);
__decorate([
    property({ type: String, reflect: true })
], DialogWrapper.prototype, "mode", void 0);
__decorate([
    property({ type: String, reflect: true })
], DialogWrapper.prototype, "size", void 0);
__decorate([
    property({ attribute: 'secondary-label' })
], DialogWrapper.prototype, "secondaryLabel", void 0);
__decorate([
    property()
], DialogWrapper.prototype, "headline", void 0);
__decorate([
    property({ type: Boolean })
], DialogWrapper.prototype, "responsive", void 0);
__decorate([
    property({ type: Boolean })
], DialogWrapper.prototype, "underlay", void 0);
__decorate([
    query('sp-dialog')
], DialogWrapper.prototype, "dialog", void 0);
//# sourceMappingURL=DialogWrapper.js.map