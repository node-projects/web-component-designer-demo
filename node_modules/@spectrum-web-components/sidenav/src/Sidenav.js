/*
Copyright 2020 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
import { __decorate } from '/web-component-designer-demo/node_modules/tslib/tslib.es6.js';
import { html, } from '/web-component-designer-demo/node_modules/@spectrum-web-components/base/./src/index.js';
import { property } from '/web-component-designer-demo/node_modules/@spectrum-web-components/base/src/decorators.js';
import { RovingTabindexController } from '/web-component-designer-demo/node_modules/@spectrum-web-components/reactive-controllers/src/RovingTabindex.js';
import sidenavStyles from './sidenav.css.js';
import { Focusable } from '/web-component-designer-demo/node_modules/@spectrum-web-components/shared/./src/index.js';
import { SideNavItem } from './SidenavItem.js';
import { SideNavHeading } from './SidenavHeading.js';
/**
 * @element sp-sidenav
 *
 * @slot - the Sidenav Items to display
 * @fires change - Announces a change in the `value` property of the navigation element.
 * This change can be "canceled" via `event.preventDefault()`.
 */
export class SideNav extends Focusable {
    constructor() {
        super(...arguments);
        this.items = new Set();
        this.rovingTabindexController = new RovingTabindexController(this, {
            focusInIndex: (elements) => {
                return elements.findIndex((el) => {
                    return this.value
                        ? !el.disabled &&
                            !this.isDisabledChild(el) &&
                            el.value === this.value
                        : !el.disabled && !this.isDisabledChild(el);
                });
            },
            direction: 'vertical',
            elements: () => [...this.querySelectorAll('sp-sidenav-item')],
            isFocusableElement: (el) => !el.disabled && !this.isDisabledChild(el),
        });
        this.manageTabIndex = false;
        this.value = undefined;
    }
    static get styles() {
        return [sidenavStyles];
    }
    startTrackingSelectionForItem(item) {
        this.items.add(item);
        this.rovingTabindexController.clearElementCache();
    }
    stopTrackingSelectionForItem(item) {
        this.items.delete(item);
        this.rovingTabindexController.clearElementCache();
    }
    handleSelect(event) {
        event.stopPropagation();
        if (this.value === event.detail.value) {
            return;
        }
        const oldValue = this.value;
        this.value = event.detail.value;
        const applyDefault = this.dispatchEvent(new Event('change', {
            bubbles: true,
            composed: true,
            cancelable: true,
        }));
        if (!applyDefault) {
            this.value = oldValue;
            event.target.selected = false;
            event.preventDefault();
        }
        else {
            this.items.forEach((item) => item.handleSideNavSelect(event));
        }
    }
    focus() {
        this.rovingTabindexController.focus();
    }
    blur() {
        if (this.focusElement === this) {
            return;
        }
        super.blur();
    }
    click() {
        if (this.focusElement === this) {
            return;
        }
        super.click();
    }
    get focusElement() {
        return this.rovingTabindexController.focusInElement || this;
    }
    isDisabledChild(child) {
        if (child.disabled) {
            return true;
        }
        let parent = child.parentElement;
        while (parent instanceof SideNavHeading ||
            (!parent.disabled &&
                parent instanceof SideNavItem &&
                parent.expanded)) {
            parent = parent.parentElement;
        }
        return parent !== this;
    }
    handleSlotchange() {
        if (this.manageTabIndex) {
            this.rovingTabindexController.manage();
        }
        else {
            this.rovingTabindexController.unmanage();
        }
    }
    render() {
        return html `
            <nav @sidenav-select=${this.handleSelect}>
                <slot
                    name="descendant"
                    @slotchange=${this.handleSlotchange}
                ></slot>
            </nav>
        `;
    }
    firstUpdated(changes) {
        super.firstUpdated(changes);
        const selectedChild = this.querySelector('[selected]');
        if (selectedChild) {
            this.value = selectedChild.value;
        }
    }
    updated(changes) {
        super.updated(changes);
        if (changes.has('manageTabIndex')) {
            if (this.manageTabIndex) {
                this.rovingTabindexController.manage();
            }
            else {
                this.rovingTabindexController.unmanage();
            }
        }
    }
}
__decorate([
    property({ type: Boolean, reflect: true, attribute: 'manage-tab-index' })
], SideNav.prototype, "manageTabIndex", void 0);
__decorate([
    property({ reflect: true })
], SideNav.prototype, "value", void 0);
//# sourceMappingURL=Sidenav.js.map