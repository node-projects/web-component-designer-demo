export class WebcomponentManifestParserService {
    _name;
    get name() { return this._name; }
    _packageData;
    _elementList;
    _resolveStored;
    _rejectStored;
    constructor(name, file) {
        this._name = name;
        import(file, { assert: { type: 'json' } }).then(module => {
            this._packageData = module.default;
            this._elementList = [];
            for (let m of this._packageData.modules) {
                for (let e of m.exports) {
                    if (e.kind == 'custom-element-definition') {
                        this._elementList.push({ tag: e.name });
                    }
                }
                if (this._resolveStored) {
                    this._resolveStored.forEach(x => x(this._elementList));
                    this._resolveStored = null;
                    this._rejectStored = null;
                }
            }
        }).catch(err => {
            if (this._rejectStored) {
                this._rejectStored.forEach(x => x(err));
                this._resolveStored = null;
                this._rejectStored = null;
            }
        });
    }
    async getElements() {
        if (this._packageData)
            return Promise.resolve(this._elementList);
        if (!this._resolveStored) {
            this._resolveStored = [];
            this._rejectStored = [];
        }
        return new Promise((resolve, reject) => { this._resolveStored.push(resolve); this._rejectStored.push(reject); });
    }
    isHandledElement(designItem) {
        throw new Error("Method not implemented.");
    }
    getProperties(designItem) {
        throw new Error("Method not implemented.");
    }
    getProperty(designItem, name) {
        throw new Error("Method not implemented.");
    }
    getPropertyTarget(designItem, property) {
        throw new Error("Method not implemented.");
    }
    setValue(designItems, property, value) {
        throw new Error("Method not implemented.");
    }
    clearValue(designItems, property) {
        throw new Error("Method not implemented.");
    }
    isSet(designItems, property) {
        throw new Error("Method not implemented.");
    }
    getValue(designItems, property) {
        throw new Error("Method not implemented.");
    }
    getUnsetValue(designItems, property) {
        throw new Error("Method not implemented.");
    }
}
