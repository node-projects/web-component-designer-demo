var ParseState;
(function (ParseState) {
    ParseState[ParseState["none"] = 0] = "none";
    ParseState[ParseState["parseName"] = 1] = "parseName";
    ParseState[ParseState["parseAttribute"] = 2] = "parseAttribute";
    ParseState[ParseState["parseInFunc"] = 3] = "parseInFunc";
    //parseInFuncSubSel = 4,
})(ParseState || (ParseState = {}));
//todo special cases: 
//:not :is :has = inner selector specifity
//:where = 0 specifity
//:nth-child :nth-last-child = inner sel. ?
export function calculateSpecificity(selector) {
    return calculateSpecificityInternal(selector, 0);
}
function calculateSpecificityInternal(selector, startIndex) {
    let s = { A: 0, B: 0, C: 0 };
    let parseState = ParseState.none;
    for (let n = startIndex; n < selector.length; n++) {
        let c = selector[n];
        if (parseState === ParseState.parseInFunc) {
            if (c == ')') {
                parseState = ParseState.none;
            }
        }
        else if (parseState === ParseState.parseAttribute) {
            if (c == ']') {
                parseState = ParseState.none;
            }
        }
        else {
            switch (c) {
                case '#':
                    s.A++;
                    parseState = ParseState.parseName;
                    break;
                case '.':
                    s.B++;
                    parseState = ParseState.parseName;
                    break;
                case '[':
                    s.B++;
                    parseState = ParseState.parseAttribute;
                    break;
                case '(':
                    parseState = ParseState.parseInFunc;
                    break;
                case ')':
                    parseState = ParseState.none;
                    break;
                case ':':
                    if (selector[n + 1] !== ':') {
                        s.B++;
                        parseState = ParseState.parseName;
                    }
                    else {
                        s.C++;
                        parseState = ParseState.parseName;
                        n++;
                    }
                    if (selector[n + 1] === ':') {
                        s.C++;
                        parseState = ParseState.parseName;
                    }
                    else {
                        if (selector.substring(n + 1, 3) === 'is(') { //todo: selectors inside of here could be , seperated and only the most specific one counts (even if it is not the matching one)... 
                            n += 3; //      functions also can be nested so we need al the prev selectors..
                        }
                        else if (selector.substring(n + 1, 4) === 'has(') { //same...
                            n += 4;
                        }
                        else if (selector.substring(n + 1, 4) === 'not(') { //same...
                            n += 4;
                        }
                        else if (selector.substring(n + 1, 10) === 'nth-child(') { //same...
                            s.B++;
                            n += 10;
                        }
                        else if (selector.substring(n + 1, 15) === 'nth-last-child(') { //same...
                            s.B++;
                            n += 15;
                        }
                        else if (selector.substring(n + 1, 5) === 'host(') { //same... can only contain a simnple selector
                            s.B++;
                            n += 5;
                        }
                        else if (selector.substring(n + 1, 13) === 'host-context(') { //same... can only contain a simple selector
                            s.B++;
                            n += 13;
                        }
                        else if (selector.substring(n + 1, 8) === 'slotted(') { //same... can only contain a simple selector
                            s.B++;
                            n += 8;
                        }
                        else if (selector.substring(n + 1, 6) === 'where(') { //where does not add specificity
                            parseState = ParseState.parseInFunc;
                            n += 6;
                        }
                        else {
                            s.B++;
                            parseState = ParseState.parseName;
                            n++;
                        }
                    }
                    break;
                case '>':
                case ' ':
                case '~':
                case '+':
                    parseState = ParseState.none;
                    break;
                case '*':
                    break;
                default:
                    if (parseState === ParseState.none) {
                        s.C++;
                        parseState = ParseState.parseName;
                    }
            }
        }
    }
    return s;
}
