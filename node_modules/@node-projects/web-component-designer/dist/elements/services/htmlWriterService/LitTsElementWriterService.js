//needs InternalBindinsgStorrageService -> keeps bindings
export class LitTsElementWriterService {
    write(indentedTextWriter, designItems, rootContainerKeepInline, options, designItemsAssignmentList) {
        throw new Error('Method not implemented.');
    }
    static head = `import { html, css, LitElement, CSSResultArray } from '/web-component-designer-demo/node_modules/lit/index.js';
import { property, customElement } from '/web-component-designer-demo/node_modules/lit/decorators.js';

@customElement('$$elementName')
class $$className extends LitElement {
  static get styles(): CSSResultArray {
    return [
      css\`
$$css
      \`,
    ];
  }

  //@property({ type: String }) btnStyle: QingButtonStyle = '';
  //@property({ type: Boolean, reflect: true }) selected = false;

  //private buttonElement: HTMLButtonElement | null = null;

  /*firstUpdated() {
    if (!this.shadowRoot) {
      throw new Error('Unexpected undefined shadowRoot');
    }
    this.buttonElement = this.shadowRoot.querySelector('button');
  }*/

  render() {
    return html\`$$html\`;
  }
}

export default $$className;

declare global {
  interface HTMLElementTagNameMap {
    '$$elementName': $$className;
  }
}`;
}
