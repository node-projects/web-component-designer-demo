import { DesignItem } from "../../item/DesignItem.js";
import { CssAttributeParser } from "../../helper/CssAttributeParser.js";
export class NodeHtmlParserService {
  constructor() {
    this._parseDiv = document.createElement("div");
  }

  async parse(html, serviceContainer, instanceServiceContainer) {
    //@ts-ignore
    let parser = await import('/node_modules/@node-projects/node-html-parser-esm/dist/index.js');
    const parsed = parser.parse(html, {
      comment: true
    });
    let designItems = [];

    for (let p of parsed.childNodes) {
      let di = this._createDesignItemsRecursive(p, serviceContainer, instanceServiceContainer);

      if (di != null) designItems.push(di);else console.warn("NodeHtmlParserService - could not parse element", p);
    }

    return designItems;
  }

  _createDesignItemsRecursive(item, serviceContainer, instanceServiceContainer) {
    let designItem = null;

    if (item.nodeType == 1) {
      let element = document.createElement(item.rawTagName);
      designItem = new DesignItem(element, serviceContainer, instanceServiceContainer);
      let hideAtDesignTime = false;
      let hideAtRunTime = false;
      let lockAtDesignTime = false;
      let style = '';

      for (let a in item.attributes) {
        if (a !== 'style') {
          designItem.attributes.set(a, item.attributes[a]);
          if (a === 'node-projects-hide-at-design-time') hideAtDesignTime = true;
          if (a === 'node-projects-hide-at-run-time') hideAtRunTime = true;
          if (a === 'node-projects-lock-at-design-time') lockAtDesignTime = true;
        } else {
          style = item.attributes[a];
        }
      }

      if ((element instanceof HTMLElement || element instanceof SVGElement) && style) {
        let styleParser = new CssAttributeParser();
        styleParser.parse(style);

        for (let s of styleParser.entries) {
          designItem.setStyle(s.name, s.value); //designItem.styles.set(s.name, s.value);
        }
      }

      designItem.hideAtDesignTime = hideAtDesignTime;
      designItem.hideAtRunTime = hideAtRunTime;
      designItem.lockAtDesignTime = lockAtDesignTime;
      element.draggable = false; //even if it should be true, for better designer exp.

      for (let c of item.childNodes) {
        let di = this._createDesignItemsRecursive(c, serviceContainer, instanceServiceContainer);

        element.appendChild(di.node);
      }
    } else if (item.nodeType == 3) {
      this._parseDiv.innerHTML = item.rawText;
      let element = this._parseDiv.childNodes[0]; //document.createTextNode(item.rawText);

      designItem = new DesignItem(element, serviceContainer, instanceServiceContainer);
    } else if (item.nodeType == 8) {
      //this._parseDiv.innerHTML = item.rawText;
      let element = document.createComment(item.rawText);
      designItem = new DesignItem(element, serviceContainer, instanceServiceContainer);
    }

    return designItem;
  }

}