export class DefaultPlacementService {
  //todo: we should be able to switch what we change 
  //(margin, absolute/relative position, order in flexbox)
  serviceForContainer(container) {
    return true;
  }

  canEnter(container, items) {
    return true;
  }

  canLeave(container, items) {
    return true;
  }

  calculateTrack(placementView, startPoint, newPoint, item) {
    let trackX = newPoint.x - startPoint.x;
    let trackY = newPoint.y - startPoint.y;

    if (placementView.alignOnGrid) {
      trackX = Math.round(trackX / placementView.gridSize) * placementView.gridSize;
      trackY = Math.round(trackY / placementView.gridSize) * placementView.gridSize;
    } else if (placementView.alignOnSnap) {
      //let rect = this.instanceServiceContainer.selectionService.primarySelection.element.getBoundingClientRect();
      let rect = item.element.getBoundingClientRect();
      let newPos = placementView.snapLines.snapToPosition({
        x: newPoint.originalX - startPoint.controlOffsetX,
        y: newPoint.originalY - startPoint.controlOffsetY
      }, {
        width: rect.width,
        height: rect.height
      }, {
        x: trackX > 0 ? 1 : -1,
        y: trackY > 0 ? 1 : -1
      });

      if (newPos.x !== null) {
        trackX = newPos.x - startPoint.originalX + Math.round(startPoint.controlOffsetX);
      }

      if (newPos.y !== null) {
        trackY = newPos.y - startPoint.originalY + Math.round(startPoint.controlOffsetY);
      }
    }

    return {
      x: trackX,
      y: trackY
    };
  }

  place(placementView, container, startPoint, newPoint, items) {
    //todo, this should revert all undo actions while active
    //maybe a undo actions returns itself or an id so it could be changed?
    let track = this.calculateTrack(placementView, startPoint, newPoint, items[0]); //console.warn('track', track);
    //todo -> what is if a transform already exists -> backup existing style.?

    for (const designItem of items) {
      designItem.element.style.transform = 'translate(' + track.x + 'px, ' + track.y + 'px)';
    } //console.warn(startPoint)
    //console.warn(newPoint)

    /*
    // See if it's over anything.
    let targets = this._rootContainer.element.querySelectorAll('*');
    for (let i = 0; i < targets.length; i++) {
      let possibleTarget = targets[i] as HTMLElement;
      possibleTarget.classList.remove('over');
           let possibleTargetDesignItem = this._rootContainer.getOrCreateDesignItem(possibleTarget);
      if (this._rootContainer.instanceServiceContainer.selectionService.selectedElements.indexOf(possibleTargetDesignItem) >= 0)
        continue;
           // todo put following a extenable function ...
      // in IContainerHandler ...
           // Only some native elements and things with slots can be drop targets.
      let slots = possibleTarget ? possibleTarget.querySelectorAll('slot') : [];
      // input is the only native in this app that doesn't have a slot
      let canDrop = (possibleTarget.localName.indexOf('-') === -1 && possibleTarget.localName !== 'input') || possibleTarget.localName === 'dom-repeat' || slots.length !== 0;
           if (!canDrop) {
        continue;
      }
           // Do we actually intersect this child?
      const possibleTargetRect = possibleTarget.getBoundingClientRect();
      if (possibleTargetRect.top - this._ownBoundingRect.top <= currentPoint.y &&
        possibleTargetRect.left - this._ownBoundingRect.left <= currentPoint.x &&
        possibleTargetRect.top - this._ownBoundingRect.top + possibleTargetRect.height >= currentPoint.y &&
        possibleTargetRect.left - this._ownBoundingRect.left + possibleTargetRect.width >= currentPoint.x) {
             // New target! Remove the other target indicators.
        var previousTargets = this._canvas.querySelectorAll('.over');
        for (var j = 0; j < previousTargets.length; j++) {
          previousTargets[j].classList.remove('over');
        }
        if (currentDesignItem != possibleTargetDesignItem && this._dropTarget != possibleTarget) {
          possibleTarget.classList.add('over');
               if (event.altKey) {
            if (this._dropTarget != null)
              this._dropTarget.classList.remove('over-enter');
            this._dropTarget = possibleTarget;
            this._dropTarget.classList.remove('over');
            this._dropTarget.classList.add('over-enter');
          }
        }
      }
    }*/

  }

  finishPlace(placementView, container, startPoint, newPoint, items) {
    let track = this.calculateTrack(placementView, startPoint, newPoint, items[0]);

    for (const designItem of items) {
      let movedElement = designItem.element;
      let oldLeft = parseInt(movedElement.style.left);
      oldLeft = Number.isNaN(oldLeft) ? 0 : oldLeft;
      let oldTop = parseInt(movedElement.style.top);
      oldTop = Number.isNaN(oldTop) ? 0 : oldTop; //let oldPosition = movedElement.style.position;
      //todo: move this to handler wich is specific depeding on the container (e.g. canvasHandler, gridHandler, flexboxHandler...)
      //todo: designitem set properties undo...

      designItem.element.style.transform = null;
      designItem.setStyle('position', 'absolute');
      designItem.setStyle('left', track.x + oldLeft + "px");
      designItem.setStyle('top', track.y + oldTop + "px");
    }
  }

}