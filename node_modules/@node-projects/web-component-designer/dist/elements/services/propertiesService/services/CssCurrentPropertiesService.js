import { PropertyType } from '../PropertyType.js';
import { RefreshMode } from '../IPropertiesService.js';
import { CssPropertiesService } from './CssPropertiesService.js';
export class CssCurrentPropertiesService extends CssPropertiesService {
    getRefreshMode(designItem) {
        return RefreshMode.fullOnValueChange;
    }
    constructor() {
        super('styles');
    }
    isHandledElement(designItem) {
        return true;
    }
    getProperty(designItem, name) {
        return { name: name, type: 'string', service: this, propertyType: PropertyType.cssValue };
    }
    getProperties(designItem) {
        if (!designItem)
            return [];
        let styles = designItem.getAllStyles();
        let arr = styles.map(x => ({
            name: x.selector ?? '&lt;local&gt;', description: x.stylesheetName ?? '', properties: [
                ...x.declarations.map(y => ({ name: y.name, renamable: true, type: 'string', service: this, propertyType: PropertyType.cssValue, styleRule: x, styleDeclaration: y })),
                { name: '', type: 'addNew', service: this, propertyType: PropertyType.complex, styleRule: x }
            ]
        }));
        return arr;
    }
    setValue(designItems, property, value) {
        if (property.styleDeclaration) {
            designItems[0].instanceServiceContainer.stylesheetService.updateDeclarationWithDeclaration(property.styleDeclaration, value, false);
        }
        else
            super.setValue(designItems, { ...property, propertyType: PropertyType.cssValue }, value);
    }
}
