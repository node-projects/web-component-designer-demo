import { ValueType } from "../ValueType.js";
import { BaseCustomWebComponent } from "../../../controls/BaseCustomWebComponent.js";
export class BaseCustomWebComponentPropertiesService {
  constructor() {
    this.name = "baseCustomWebComponent";
    /*private _camelToDashCase(text: string){
        return text.replace(/([A-Z])/g, (g) => `-${g[0].toLowerCase()}`);
    }*/
  }

  isHandledElement(designItem) {
    return designItem.element instanceof BaseCustomWebComponent;
  }

  getProperties(designItem) {
    if (!this.isHandledElement(designItem)) return null;
    let properties = [];
    let list = designItem.element.constructor.properties;

    for (const name in list) {
      const property = list[name];

      if (property === Date) {
        let property = {
          name: name,
          type: "date",
          service: this
        };
        properties.push(property);
      } else if (property === Object) {
        let property = {
          name: name,
          type: "object",
          service: this
        };
        properties.push(property);
      } else if (property === Number) {
        let property = {
          name: name,
          type: "number",
          service: this
        };
        properties.push(property);
      } else {
        let property = {
          name: name,
          type: "string",
          service: this
        };
        properties.push(property);
      }
    }

    return properties;
  }

  setValue(designItems, property, value) {
    for (let d of designItems) {
      if (property.type === 'object') d.setAttribute(property.name, JSON.stringify(value)); //@ts-ignore

      d.element._parseAttributesToProperties();
    }
  }

  isSet(designItems, property) {
    return ValueType.none;
  }

  getValue(designItems, property) {
    return null;
  }

  getUnsetValue(designItems, property) {
    return null;
  }

}