import { PropertyType } from '../PropertyType.js';
import { RefreshMode } from '../IPropertiesService.js';
import { CommonPropertiesService } from './CommonPropertiesService.js';
import { ValueType } from '../ValueType.js';
export class CssCustomPropertiesService extends CommonPropertiesService {
    getRefreshMode(designItem) {
        return RefreshMode.fullOnValueChange;
    }
    constructor() {
        super();
        this.name = 'customProperties';
    }
    isHandledElement(designItem) {
        return true;
    }
    getProperty(designItem, name) {
        return { name: name, type: 'string', service: this, propertyType: PropertyType.cssValue };
    }
    getProperties(designItem) {
        if (!designItem?.element?.computedStyleMap)
            return null;
        let rootMap = Array.from(designItem.instanceServiceContainer.designerCanvas.rootDesignItem.element.computedStyleMap()).map(x => x[0]).filter(key => key.startsWith("--"));
        let props = Array.from(designItem.element.computedStyleMap()).map(x => x[0]).filter(key => key.startsWith("--"));
        let arr = props.filter(x => !rootMap.includes(x)).map(x => ({
            name: x,
            service: this,
            propertyType: PropertyType.cssValue
        }));
        return arr;
    }
    clearValue(designItems, property, clearType) {
        super.clearValue(designItems, property, clearType);
    }
    getValue(designItems, property) {
        return getComputedStyle(designItems[0].element).getPropertyValue(property.name);
    }
    getUnsetValue(designItems, property) {
        return super.getUnsetValue(designItems, property);
    }
    isSet(designItems, property) {
        return designItems[0].hasStyle(property.name) ? ValueType.all : ValueType.none;
    }
}
