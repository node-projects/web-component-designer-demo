import { PropertiesHelper } from "./PropertiesHelper.js";
import { UnkownElementPropertiesService } from "./UnkownElementPropertiesService.js";
export class AbstractBasePropertiesService extends UnkownElementPropertiesService {
  getProperties(designItem) {
    if (!this.isHandledElement(designItem)) return null;
    let properties = [];
    let list = designItem.element.constructor.properties;

    for (const name in list) {
      const polymerProperty = list[name];

      if (polymerProperty === String) {
        let property = {
          name: name,
          type: "string",
          service: this
        };
        properties.push(property);
      } else if (polymerProperty === Object) {
        let property = {
          name: name,
          type: "string",
          service: this
        };
        properties.push(property);
      } else if (polymerProperty === Number) {
        let property = {
          name: name,
          type: "number",
          service: this
        };
        properties.push(property);
      } else if (polymerProperty === Date) {
        let property = {
          name: name,
          type: "date",
          service: this
        };
        properties.push(property);
      } else if (PropertiesHelper.isTypescriptEnum(polymerProperty)) {
        let property = {
          name: name,
          type: "enum",
          enumValues: PropertiesHelper.getTypescriptEnumEntries(polymerProperty),
          service: this
        };
        properties.push(property);
      } else {
        if (polymerProperty.type === String) {
          let property = {
            name: name,
            type: "string",
            service: this
          };
          properties.push(property);
        } else if (polymerProperty.type === Object) {
          let property = {
            name: name,
            type: "string",
            service: this
          };
          properties.push(property);
        } else if (polymerProperty.type === Number) {
          let property = {
            name: name,
            type: "number",
            service: this
          };
          properties.push(property);
        } else if (polymerProperty.type === Date) {
          let property = {
            name: name,
            type: "date",
            service: this
          };
          properties.push(property);
        } else if (PropertiesHelper.isTypescriptEnum(polymerProperty)) {
          let property = {
            name: name,
            type: "enum",
            enumValues: PropertiesHelper.getTypescriptEnumEntries(polymerProperty),
            service: this
          };
          properties.push(property);
        } else {
          let property = {
            name: name,
            type: "string",
            service: this
          };
          properties.push(property);
        }
      }
    }

    return properties;
  }

}