import { CssStyleChangeAction } from "../services/undoService/transactionItems/CssStyleChangeAction.js";
import { NodeType } from "./NodeType.js";
const hideAtDesignTimeAttributeName = 'node-projects-hide-at-design-time';
const hideAtRunTimeAttributeName = 'node-projects-hide-at-run-time';
const lockAtDesignTimeAttributeName = 'node-projects-lock-at-design-time';
export class DesignItem {
  constructor(node, serviceContainer, instanceServiceContainer) {
    this.node = node;
    this.serviceContainer = serviceContainer;
    this.instanceServiceContainer = instanceServiceContainer;
    this.attributes = new Map();
    this.styles = new Map();

    DesignItem._designItemMap.set(node, this);
  }

  get nodeType() {
    if (this.node instanceof Comment) return NodeType.Comment;
    if (this.node instanceof Text) return NodeType.TextNode;
    return NodeType.Element;
  }

  get hasAttributes() {
    return this.attributes.size > 0;
  }

  get hasStyles() {
    return this.styles.size > 0;
  }

  get element() {
    return this.node;
  }

  get name() {
    return this.element.localName;
  }

  get id() {
    return this.element.id;
  }

  set id(value) {
    this.element.id = value;
  }

  get hasChildren() {
    return this.element.childNodes.length > 0;
  }

  *children() {
    for (const e of this.element.childNodes) {
      yield DesignItem.GetOrCreateDesignItem(e, this.serviceContainer, this.instanceServiceContainer);
    }
  }

  get childCount() {
    return this.element.childNodes.length;
  }

  get firstChild() {
    return this.getOrCreateDesignItem(this.element.childNodes[0]);
  }

  get parent() {
    return this.getOrCreateDesignItem(this.element.parentNode);
  }

  get hasContent() {
    return this.nodeType == NodeType.TextNode || this.element.childNodes.length === 0 && this.content !== null;
  }

  get content() {
    return this.node.textContent;
  }

  set content(value) {
    this.node.textContent = value;
  }

  get hideAtDesignTime() {
    return this._hideAtDesignTime;
  }

  set hideAtDesignTime(value) {
    var _a;

    this._hideAtDesignTime = value;
    if (value) this.attributes.set(hideAtDesignTimeAttributeName, "");else this.attributes.delete(hideAtDesignTimeAttributeName);

    if (this.element instanceof HTMLElement || this.element instanceof SVGElement) {
      if (!value) this.element.style.display = (_a = this.styles['display']) !== null && _a !== void 0 ? _a : "";else this.element.style.display = 'none';
    }
  }

  get hideAtRunTime() {
    return this._hideAtRunTime;
  }

  set hideAtRunTime(value) {
    var _a;

    this._hideAtRunTime = value;
    if (value) this.attributes.set(hideAtRunTimeAttributeName, "");else this.attributes.delete(hideAtRunTimeAttributeName);

    if (this.element instanceof HTMLElement || this.element instanceof SVGElement) {
      if (!value) this.element.style.opacity = (_a = this.styles['opacity']) !== null && _a !== void 0 ? _a : "";else this.element.style.opacity = '0.3';
    }
  }

  get lockAtDesignTime() {
    return this._lockAtDesignTime;
  }

  set lockAtDesignTime(value) {
    this._lockAtDesignTime = value;
    if (value) this.attributes.set(lockAtDesignTimeAttributeName, "");else this.attributes.delete(lockAtDesignTimeAttributeName);

    if (this.element instanceof HTMLElement || this.element instanceof SVGElement) {
      if (!value) this.element.style.pointerEvents = 'auto';else this.element.style.pointerEvents = 'none';
    }
  }

  static createDesignItemFromInstance(node, serviceContainer, instanceServiceContainer) {
    let designItem = new DesignItem(node, serviceContainer, instanceServiceContainer);

    for (let a of designItem.element.attributes) {
      if (a.name !== 'style') {
        designItem.attributes.set(a.name, a.value);
        if (a.name === hideAtDesignTimeAttributeName) designItem._hideAtDesignTime = true;
        if (a.name === hideAtRunTimeAttributeName) designItem._hideAtRunTime = true;
        if (a.name === lockAtDesignTimeAttributeName) designItem._lockAtDesignTime = true;
      }
    }

    if (node instanceof HTMLElement || node instanceof SVGElement) {
      for (let s of node.style) {
        let val = node.style[s];
        if (val && typeof val === 'string') designItem.styles.set(s, node.style[s]);
      }

      if (!designItem._lockAtDesignTime) node.style.pointerEvents = 'auto';else node.style.pointerEvents = 'none'; //node.style.cursor = 'pointer';
    }

    node.draggable = false; //even if it should be true, for better designer exp.

    if (designItem.element.children.length === 0) designItem.content = designItem.element.textContent;
    return designItem;
  }

  openGroup(title, affectedItems) {
    return this.instanceServiceContainer.undoService.openGroup(title, affectedItems);
  }

  getOrCreateDesignItem(node) {
    return DesignItem.GetOrCreateDesignItem(node, this.serviceContainer, this.instanceServiceContainer);
  }

  static GetOrCreateDesignItem(node, serviceContainer, instanceServiceContainer) {
    if (!node) return null;

    let designItem = DesignItem._designItemMap.get(node);

    if (!designItem) {
      designItem = new DesignItem(node, serviceContainer, instanceServiceContainer);
    }

    return designItem;
  }

  setStyle(name, value) {
    let action = new CssStyleChangeAction(this, name, value, this.styles.get(name));
    this.instanceServiceContainer.undoService.execute(action);
  }

  removeStyle(name) {
    let action = new CssStyleChangeAction(this, name, '', this.styles.get(name));
    this.instanceServiceContainer.undoService.execute(action);
  }

  setAttribute(name, value) {
    this.attributes.set(name, value);

    if (name != "draggable") {
      this.element.setAttribute(name, value);
    }
  }

  removeAttribute(name) {
    this.attributes.delete(name);

    if (name != "draggable") {
      this.element.removeAttribute(name);
    }
  }

}
DesignItem._designItemMap = new WeakMap();