import { CssStyleChangeAction } from "../services/undoService/transactionItems/CssStyleChangeAction.js";

let DesignItem =
/** @class */
(() => {
  class DesignItem {
    constructor(element, serviceContainer, instanceServiceContainer) {
      this.content = null;
      this.element = element;
      this.serviceContainer = serviceContainer;
      this.instanceServiceContainer = instanceServiceContainer;
      this.attributes = new Map();
      this.styles = new Map();

      for (let a of element.attributes) {
        if (a.name !== 'style') {
          this.attributes.set(a.name, a.value);
          if (a.name === 'node-projects-hide-at-design-time') this._hideAtDesignTime = true;
          if (a.name === 'node-projects-hide-at-run-time') this._hideAtRunTime = true;
          if (a.name === 'node-projects-lock-at-design-time') this._lockAtDesignTime = true;
        }
      }

      if (element instanceof HTMLElement || element instanceof SVGElement) {
        for (let s of element.style) {
          let val = element.style[s];
          if (val && typeof val === 'string') this.styles.set(s, element.style[s]);
        }

        if (!this._lockAtDesignTime) element.style.pointerEvents = 'auto';else element.style.pointerEvents = 'none';
      }

      element.draggable = false; //even if it should be true, for better designer exp.

      if (this.element.children.length === 0) this.content = this.element.textContent;
    }

    get hasAttributes() {
      return this.attributes.size > 0;
    }

    get hasStyles() {
      return this.styles.size > 0;
    }

    get name() {
      return this.element.localName;
    }

    get hasChildren() {
      return this.element.children.length > 0;
    }

    *children() {
      for (const e of this.element.children) {
        yield DesignItem.GetOrCreateDesignItem(e, this.serviceContainer, this.instanceServiceContainer);
      }
    }

    get hasContent() {
      return this.element.children.length === 0 && this.content !== null;
    }

    get hideAtDesignTime() {
      return this._hideAtDesignTime;
    }

    set hideAtDesignTime(value) {
      this._hideAtDesignTime = value;

      if (this.element instanceof HTMLElement || this.element instanceof SVGElement) {
        if (!value) this.element.style.display = this.styles['display'];else this.element.style.display = 'none';
      }
    }

    get hideAtRunTime() {
      return this._hideAtRunTime;
    }

    set hideAtRunTime(value) {
      this._hideAtRunTime = value;

      if (this.element instanceof HTMLElement || this.element instanceof SVGElement) {
        if (!value) this.element.style.opacity = this.styles['opacity'];else this.element.style.opacity = '0.3';
      }
    }

    get lockAtDesignTime() {
      return this._lockAtDesignTime;
    }

    set lockAtDesignTime(value) {
      this._lockAtDesignTime = value;

      if (this.element instanceof HTMLElement || this.element instanceof SVGElement) {
        if (!value) this.element.style.pointerEvents = 'auto';else this.element.style.pointerEvents = 'none';
      }
    }

    openGroup(title, affectedItems) {
      return this.instanceServiceContainer.undoService.openGroup(title, affectedItems);
    }

    static GetOrCreateDesignItem(element, serviceContainer, instanceServiceContainer) {
      if (!element) return null;
      let designItem = element[DesignItem._designItemSymbol];

      if (!designItem) {
        designItem = new DesignItem(element, serviceContainer, instanceServiceContainer);
        element[DesignItem._designItemSymbol] = designItem;
      }

      return designItem;
    }

    static RemoveDesignItemFromElement(element) {
      if (!element) return null;
      delete element[DesignItem._designItemSymbol];
    }

    setStyle(name, value) {
      let action = new CssStyleChangeAction(this, name, value);
      this.instanceServiceContainer.undoService.execute(action);
    }

    removeStyle(property) {
      let action = new CssStyleChangeAction(this, name, '');
      this.instanceServiceContainer.undoService.execute(action);
    }

    setAttribute(name, value) {
      this.attributes.set(name, value);

      if (name != "draggable") {
        this.element.setAttribute(name, value);
      }
    }

    removeAttribute(name) {
      this.attributes.delete(name);

      if (name != "draggable") {
        this.element.removeAttribute(name);
      }
    }

  }

  DesignItem._designItemSymbol = Symbol('DesignItem');
  return DesignItem;
})();

export { DesignItem };