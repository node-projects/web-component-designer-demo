import { PropertyGridPropertyList } from "./PropertyGridPropertyList.js";
import { DesignerTabControl } from "../../controls/DesignerTabControl.js";
import { BaseCustomWebComponent, css } from "../../controls/BaseCustomWebComponent.js";
import { CssPropertiesService } from "../../services/propertiesService/services/CssPropertiesService.js";
export class PropertyGrid extends BaseCustomWebComponent {
  constructor() {
    super();
    this._designerTabControl = new DesignerTabControl();
    this.shadowRoot.appendChild(this._designerTabControl);
  }

  set serviceContainer(value) {
    this._serviceContainer = value;
    this._propertyGridPropertyLists = [];
    let attributeEditorAttributeList = new PropertyGridPropertyList(value, new CssPropertiesService("styles"));
    attributeEditorAttributeList.createElements(null);
    attributeEditorAttributeList.title = "styles";

    this._designerTabControl.appendChild(attributeEditorAttributeList);

    this._propertyGridPropertyLists.push(attributeEditorAttributeList);

    attributeEditorAttributeList = new PropertyGridPropertyList(value, new CssPropertiesService("flex"));
    attributeEditorAttributeList.createElements(null);
    attributeEditorAttributeList.title = "flex";

    this._designerTabControl.appendChild(attributeEditorAttributeList);

    this._propertyGridPropertyLists.push(attributeEditorAttributeList);

    attributeEditorAttributeList = new PropertyGridPropertyList(value, new CssPropertiesService("grid"));
    attributeEditorAttributeList.createElements(null);
    attributeEditorAttributeList.title = "grid";

    this._designerTabControl.appendChild(attributeEditorAttributeList);

    this._propertyGridPropertyLists.push(attributeEditorAttributeList);

    this._designerTabControl.selectedIndex = 0;
  }

  get serviceContainer() {
    return this._serviceContainer;
  }

  get selectedItems() {
    return this._selectedItems;
  }

  set selectedItems(items) {
    this._selectedItems = items;

    if (items) {
      if (items.length == 1) {
        //let element = items[0];
        for (const a of this._propertyGridPropertyLists) {
          a.refreshForDesignItems(items);
        }
        /*let properties = serviceContainer.forSomeServicesTillResult("propertyService", x => x.getProperties(element));
                 if (properties) {
          let attributeEditorAttributeList = new PropertyGridPropertyList();
          attributeEditorAttributeList.serviceContainer = this.serviceContainer;
          // attributeEditorAttributeList.title =
          attributeEditorAttributeList.createElements(properties);
          this._designerTabControl.appendChild(attributeEditorAttributeList);
        }*/

      }
    } else {//todo
      }
  }

}
PropertyGrid.style = css`
    :host {
      display: block;
      height: 100%;
    }
    iron-pages {
      overflow: hidden;
      height: 250px;
      background: var(--medium-grey, #2f3545);
      color: white;
    }
    button:hover {
      box-shadow: inset 0 3px 0 var(--light-grey);
    }
    button:focus {
      box-shadow: inset 0 3px 0 var(--highlight-pink, #e91e63);
    }
    `;
customElements.define('node-projects-property-grid', PropertyGrid);