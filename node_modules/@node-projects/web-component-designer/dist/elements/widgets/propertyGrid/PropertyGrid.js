import { PropertyGridPropertyList } from './PropertyGridPropertyList';
import { DesignerTabControl } from '../../controls/DesignerTabControl';
import { BaseCustomWebComponentLazyAppend, css } from '@node-projects/base-custom-webcomponent';
import { CssPropertiesService } from '../../services/propertiesService/services/CssPropertiesService';
export class PropertyGrid extends BaseCustomWebComponentLazyAppend {
    constructor() {
        super();
        this._designerTabControl = new DesignerTabControl();
        this.shadowRoot.appendChild(this._designerTabControl);
        this._itemsObserver = new MutationObserver((m) => {
            for (const a of this._propertyGridPropertyLists) {
                a.refreshForDesignItems(this._selectedItems);
            }
        });
    }
    set serviceContainer(value) {
        this._serviceContainer = value;
        this._propertyGridPropertyLists = [];
        let attributeEditorAttributeList = new PropertyGridPropertyList(value, new CssPropertiesService("styles"));
        attributeEditorAttributeList.createElements(null);
        attributeEditorAttributeList.title = "styles";
        this._designerTabControl.appendChild(attributeEditorAttributeList);
        this._propertyGridPropertyLists.push(attributeEditorAttributeList);
        attributeEditorAttributeList = new PropertyGridPropertyList(value, new CssPropertiesService("alignment"));
        attributeEditorAttributeList.createElements(null);
        attributeEditorAttributeList.title = "alignment";
        this._designerTabControl.appendChild(attributeEditorAttributeList);
        this._propertyGridPropertyLists.push(attributeEditorAttributeList);
        attributeEditorAttributeList = new PropertyGridPropertyList(value, new CssPropertiesService("grid"));
        attributeEditorAttributeList.createElements(null);
        attributeEditorAttributeList.title = "grid";
        this._designerTabControl.appendChild(attributeEditorAttributeList);
        this._propertyGridPropertyLists.push(attributeEditorAttributeList);
        this._designerTabControl.selectedIndex = 0;
    }
    get serviceContainer() {
        return this._serviceContainer;
    }
    get selectedItems() {
        return this._selectedItems;
    }
    set selectedItems(items) {
        this._selectedItems = items;
        for (const a of this._propertyGridPropertyLists) {
            a.designItemsChanged(items);
        }
        if (items) {
            if (items.length == 1) {
                for (const a of this._propertyGridPropertyLists) {
                    a.designItemsChanged(items);
                    a.refreshForDesignItems(items);
                }
                this._observeItems();
                /*let properties = serviceContainer.forSomeServicesTillResult("propertyService", x => x.getProperties(element));
        
                if (properties) {
                  let attributeEditorAttributeList = new PropertyGridPropertyList();
                  attributeEditorAttributeList.serviceContainer = this.serviceContainer;
                  // attributeEditorAttributeList.title =
                  attributeEditorAttributeList.createElements(properties);
                  this._designerTabControl.appendChild(attributeEditorAttributeList);
                }*/
            }
        }
        else {
            this._itemsObserver.disconnect();
        }
    }
    _observeItems() {
        this._itemsObserver.disconnect();
        this._itemsObserver.observe(this._selectedItems[0].element, { attributes: true, childList: false, characterData: false });
    }
}
PropertyGrid.style = css `
    :host {
      display: block;
      height: 100%;
    }
    iron-pages {
      overflow: hidden;
      height: 250px;
      background: var(--medium-grey, #2f3545);
      color: white;
    }
    button:hover {
      box-shadow: inset 0 3px 0 var(--light-grey);
    }
    button:focus {
      box-shadow: inset 0 3px 0 var(--highlight-pink, #e91e63);
    }
    `;
customElements.define('node-projects-property-grid', PropertyGrid);
