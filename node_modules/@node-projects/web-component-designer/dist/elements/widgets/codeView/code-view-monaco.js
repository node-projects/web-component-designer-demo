import { BaseCustomWebComponentLazyAppend, css, html } from "../../../../../base-custom-webcomponent/dist/index.js";
export class CodeViewMonaco extends BaseCustomWebComponentLazyAppend {
  async ready() {
    this._editor = this._getDomElement('container'); //@ts-ignore

    require.config({
      paths: {
        'vs': 'node_modules/monaco-editor/min/vs'
      }
    }); //@ts-ignore


    require(['vs/editor/editor.main'], () => {
      //@ts-ignore
      this._monacoEditor = monaco.editor.create(this._editor, {
        automaticLayout: true,
        value: this.code,
        language: 'html',
        minimap: {
          //@ts-ignore
          size: 'fill'
        }
      });

      this._monacoEditor.layout();
    });
  }

  focusEditor() {
    this.focus();

    this._monacoEditor.focus();
  }

  activated() {
    if (this._monacoEditor) this._monacoEditor.layout();
  }

  update(code) {
    this.code = code;

    if (this._monacoEditor) {
      this._monacoEditor.setValue(code);
    }
  }

  getText() {
    return this._monacoEditor.getValue();
  }

  setSelection(position) {
    let model = this._monacoEditor.getModel();

    let point1 = model.getPositionAt(position.start);
    let point2 = model.getPositionAt(position.start + position.length);

    this._monacoEditor.setSelection({
      startLineNumber: point1.lineNumber,
      startColumn: point1.column,
      endLineNumber: point2.lineNumber,
      endColumn: point2.column
    });

    this._monacoEditor.revealLineInCenter(point1.lineNumber);
  }

}
CodeViewMonaco.style = css`
    :host {
      display: block;
      height: 100%;
      width: 100%;
    }
    `;
CodeViewMonaco.template = html`
      <style>@import "/node_modules/monaco-editor/min/vs/editor/editor.main.css";</style>
      <div id="container" style="width: 100%; height: 100%;"></div>
  `;
customElements.define('node-projects-code-view-monaco', CodeViewMonaco);