import { BaseCustomWebComponent, css } from "../../../../node_modules/@node-projects/base-custom-webcomponent/dist/index.js";
export class TreeViewExtended extends BaseCustomWebComponent {
  constructor() {
    super();
    let externalCss = document.createElement('style');
    externalCss.innerHTML = '@import url("./node_modules/jquery.fancytree/dist/skin-win8/ui.fancytree.css");';
    this.shadowRoot.appendChild(externalCss);
    this._filter = document.createElement('input');
    this._filter.style.width = '100%';
    this._filter.placeholder = 'Filter...';
    this._filter.autocomplete = 'off';

    this._filter.onkeyup = () => {
      let match = this._filter.value;

      this._tree.filterNodes(node => {
        return new RegExp(match, "i").test(node.title);
      });
    };

    this.shadowRoot.appendChild(this._filter);
    this._treeDiv = document.createElement('div');
    this._treeDiv.style.height = '100%';
    this._treeDiv.style.overflow = 'auto';

    this._treeDiv.setAttribute('id', 'tree');

    this.shadowRoot.appendChild(this._treeDiv);
  }

  async ready() {
    //this._treeDiv.classList.add('fancytree-connectors');
    $(this._treeDiv).fancytree({
      icon: false,
      extensions: ['dnd5', 'multi', 'filter', 'childcounter'],
      quicksearch: true,
      source: [],
      dnd5: {
        dropMarkerParent: this.shadowRoot,
        preventRecursion: true,
        preventVoidMoves: false,
        dropMarkerOffsetX: -24,
        dropMarkerInsertOffsetX: -16,
        dragStart: (node, data) => {
          /* This function MUST be defined to enable dragging for the tree.
            *
            * Return false to cancel dragging of node.
            * data.dataTransfer.setData() and .setDragImage() is available
            * here.
            */
          // Set the allowed effects (i.e. override the 'effectAllowed' option)
          data.effectAllowed = "all"; // Set a drop effect (i.e. override the 'dropEffectDefault' option)
          // data.dropEffect = "link";

          data.dropEffect = "copy"; // We could use a custom image here:
          // data.dataTransfer.setDragImage($("<div>TEST</div>").appendTo("body")[0], -10, -10);
          // data.useDefaultImage = false;
          // Return true to allow the drag operation

          return true;
        },
        // dragDrag: function(node, data) {
        //   logLazy("dragDrag", null, 2000,
        //     "T1: dragDrag: " + "data: " + data.dropEffect + "/" + data.effectAllowed +
        //     ", dataTransfer: " + data.dataTransfer.dropEffect + "/" + data.dataTransfer.effectAllowed );
        // },
        // dragEnd: function(node, data) {
        //   node.debug( "T1: dragEnd: " + "data: " + data.dropEffect + "/" + data.effectAllowed +
        //     ", dataTransfer: " + data.dataTransfer.dropEffect + "/" + data.dataTransfer.effectAllowed, data);
        //     alert("T1: dragEnd")
        // },
        // --- Drop-support:
        dragEnter: (node, data) => {
          // data.dropEffect = "copy";
          return true;
        },
        dragOver: (node, data) => {
          // Assume typical mapping for modifier keys
          data.dropEffect = data.dropEffectSuggested; // data.dropEffect = "move";
        },
        dragDrop: (node, data) => {
          /* This function MUST be defined to enable dropping of items on
            * the tree.
            */
          let newNode,
              transfer = data.dataTransfer,
              sourceNodes = data.otherNodeList,
              mode = data.dropEffect;

          if (data.hitMode === "after") {
            // If node are inserted directly after tagrget node one-by-one,
            // this would reverse them. So we compensate:
            sourceNodes.reverse();
          }

          if (data.otherNode) {
            // Drop another Fancytree node from same frame (maybe a different tree however)
            //let sameTree = (data.otherNode.tree === data.tree);
            if (mode === "move") {
              data.otherNode.moveTo(node, data.hitMode);
            } else {
              newNode = data.otherNode.copyTo(node, data.hitMode);

              if (mode === "link") {
                newNode.setTitle("Link to " + newNode.title);
              } else {
                newNode.setTitle("Copy of " + newNode.title);
              }
            }
          } else if (data.otherNodeData) {
            // Drop Fancytree node from different frame or window, so we only have
            // JSON representation available
            //@ts-ignore
            node.addChild(data.otherNodeData, data.hitMode);
          } else if (data.files.length) {
            // Drop files
            for (let i = 0; i < data.files.length; i++) {
              let file = data.files[i];
              node.addNode({
                title: "'" + file.name + "' (" + file.size + " bytes)"
              }, data.hitMode); // var url = "'https://example.com/upload",
              //     formData = new FormData();
              // formData.append("file", transfer.files[0])
              // fetch(url, {
              //   method: "POST",
              //   body: formData
              // }).then(function() { /* Done. Inform the user */ })
              // .catch(function() { /* Error. Inform the user */ });
            }
          } else {
            // Drop a non-node
            node.addNode({
              title: transfer.getData("text")
            }, data.hitMode);
          }

          node.setExpanded();
        }
      },
      multi: {
        mode: ""
      },
      filter: {
        autoApply: true,
        autoExpand: false,
        counter: true,
        fuzzy: true,
        hideExpandedCounter: true,
        hideExpanders: false,
        highlight: true,
        leavesOnly: false,
        nodata: true,
        mode: "hide" // Grayout unmatched nodes (pass "hide" to remove unmatched node instead)

      },
      childcounter: {
        deep: true,
        hideZeros: true,
        hideExpanded: true
      }
    }); //@ts-ignore

    this._tree = $.ui.fancytree.getTree(this._treeDiv);

    this._treeDiv.children[0].classList.add('fancytree-connectors');
  }

  createTree(rootItem) {
    if (this._tree) {
      this._recomputeTree(rootItem);
    }
  }

  selectionChanged(event) {
    if (event.selectedElements.length > 0) {
      this._highlight(event.selectedElements);
    }
  }

  _recomputeTree(rootItem) {
    this._tree.getRootNode().removeChildren();

    this._getChildren(rootItem, null);

    this._tree.expandAll(); //@ts-ignore


    this._tree.getRootNode().updateCounters();
  }

  _getChildren(item, currentNode) {
    if (currentNode == null) {
      currentNode = this._tree.getRootNode();
    }

    const newNode = currentNode.addChildren({
      title: item.name + " " + (item.id ? '#' + item.id : ''),
      folder: item.children.length > 0 ? true : false,
      //@ts-ignore
      ref: item
    });

    for (let i of item.children()) {
      this._getChildren(i, newNode);
    }
  }

  _highlight(activeElements) {
    if (activeElements != null) {
      this._tree.visit(node => {
        //@ts-ignore
        if (activeElements.indexOf(node.data.ref) >= 0) {
          node.setSelected(true);
        } else {
          node.setSelected(false);
        }
      });
    }
  }

}
TreeViewExtended.style = css`
      span.drag-source {
        border: 1px solid grey;
        border-radius: 3px;
        padding: 2px;
        background-color: silver;
      }

      span.fancytree-node.fancytree-drag-source {
        outline: 1px dotted grey;
      }
      span.fancytree-node.fancytree-drop-accept {
        outline: 1px dotted green;
      }
      span.fancytree-node.fancytree-drop-reject {
        outline: 1px dotted red;
      }
      #tree ul {
        border: none;
      }
      #tree ul:focus {
        outline: none;
      }
    `;
customElements.define('node-projects-tree-view-extended', TreeViewExtended);