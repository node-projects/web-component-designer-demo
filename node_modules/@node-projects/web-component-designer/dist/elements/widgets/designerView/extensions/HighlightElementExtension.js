import { getBoxQuads } from '../../../helper/getBoxQuads.js';
import { AbstractExtension } from './AbstractExtension.js';
import { OverlayLayer } from './OverlayLayer.js';
const offset = 3;
export class HighlightElementExtension extends AbstractExtension {
    _rect;
    constructor(extensionManager, designerView, extendedItem) {
        super(extensionManager, designerView, extendedItem);
    }
    extend() {
        this.refresh();
    }
    refresh() {
        const transformedCornerPoints = getBoxQuads(this.extendedItem.element, { relativeTo: this.designerCanvas.canvas, offset: new DOMQuad({ x: offset / this.designerCanvas.scaleFactor, y: offset / this.designerCanvas.scaleFactor }, { x: -offset / this.designerCanvas.scaleFactor, y: offset / this.designerCanvas.scaleFactor }, { x: -offset / this.designerCanvas.scaleFactor, y: -offset / this.designerCanvas.scaleFactor }, { x: offset / this.designerCanvas.scaleFactor, y: -offset / this.designerCanvas.scaleFactor }) })[0];
        if (!isNaN(transformedCornerPoints.p1.x)) {
            this._rect = this._drawTransformedRect(transformedCornerPoints, 'svg-hover', this._rect, OverlayLayer.Background);
            this._rect.style.strokeWidth = (2 / this.designerCanvas.scaleFactor).toString();
        }
    }
    dispose() {
        this._removeAllOverlays();
    }
}
//# sourceMappingURL=HighlightElementExtension.js.map