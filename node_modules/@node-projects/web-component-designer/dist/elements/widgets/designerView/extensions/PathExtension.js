import { AbstractExtension } from "./AbstractExtension.js";
import "../../../helper/PathDataPolyfill.js";
export class PathExtension extends AbstractExtension {
  constructor(designerView, extendedItem) {
    super(designerView, extendedItem);
  }

  extend() {
    this._itemRect = this.extendedItem.element.getBoundingClientRect();
    const pathdata = this.extendedItem.node.getPathData();

    for (let p of pathdata) {
      switch (p.type) {
        case 'M':
          this._drawPathCircle(p.values[0], p.values[1]);

          break;

        case 'L':
          this._drawPathCircle(p.values[0], p.values[1]);

          break;

        case 'H':
          break;

        case 'V':
          break;

        case 'Z':
          break;

        case 'C':
          this._drawPathCircle(p.values[0], p.values[1]);

          this._drawPathCircle(p.values[2], p.values[3]);

          this._drawPathCircle(p.values[4], p.values[5]);

          break;

        case 'S':
          this._drawPathCircle(p.values[0], p.values[1]);

          this._drawPathCircle(p.values[2], p.values[3]);

          break;

        case 'Q':
          this._drawPathCircle(p.values[0], p.values[1]);

          this._drawPathCircle(p.values[2], p.values[3]);

          break;

        case 'T':
          this._drawPathCircle(p.values[0], p.values[1]);

          break;

        case 'A':
          this._drawPathCircle(p.values[0], p.values[1]);

          this._drawPathCircle(p.values[5], p.values[6]);

          break;
      }
    }
  }

  _drawPathCircle(x, y) {
    this._drawCircleOverlay(this._itemRect.x - this.designerView.containerBoundingRect.x + x, this._itemRect.y - this.designerView.containerBoundingRect.y + y, 3, 'svg-path');
  }

  refresh() {
    this._removeAllOverlays();

    this.extend();
  }

  dispose() {
    this._removeAllOverlays();
  }

}