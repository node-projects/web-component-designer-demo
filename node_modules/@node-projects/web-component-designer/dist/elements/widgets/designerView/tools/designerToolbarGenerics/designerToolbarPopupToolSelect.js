import { BaseCustomWebComponentConstructorAppend, css, html, TypedEvent } from '/web-component-designer-demo/node_modules/@node-projects/base-custom-webcomponent/./dist/index.js';
import { DesignerToolRenderer } from './designerToolRenderer.js';
export class DesignerToolbarPopupToolSelect extends BaseCustomWebComponentConstructorAppend {
    static style = css `
      .popup-tool-select {
          display: flex;
          flex-wrap: wrap;
      }

      .tool {
          height: 32px;
          width: 32px;
          background-color: rgb(255, 255, 255);
          background-size: 65%;
          background-repeat: no-repeat;
          background-position: center center;
          flex-shrink: 0;
          border-bottom: 1px solid black;
    }`;
    static template = html `
        <div id="popup-tool-select" class="popup-tool-select"></div>`;
    _popupToolSelected;
    //TODO: remove this element. it only contains a div, and binds events. 
    //  this could also be done by the user of this
    constructor() {
        super();
        this._popupToolSelected = this._getDomElement("popup-tool-select");
    }
    toolActivated = new TypedEvent();
    async insertToolContent(template) {
        this._popupToolSelected.appendChild(template.content.cloneNode(true));
        await this._waitForChildrenReady();
        this._setupEventHandler();
    }
    _setupEventHandler() {
        for (let tool of [...this._popupToolSelected.querySelectorAll("div.tool")]) {
            tool.addEventListener("click", () => this._toolSelected(tool));
        }
    }
    _toolSelected(tool) {
        this.toolActivated.emit(DesignerToolRenderer.createObjectFromTool(tool));
    }
}
customElements.define('node-projects-designer-tools-popup-select', DesignerToolbarPopupToolSelect);
