import { BaseCustomWebComponentConstructorAppend, css, html } from '/web-component-designer-demo/node_modules/@node-projects/base-custom-webcomponent/./dist/index.js';
import { CommandType } from "../../../../../commandHandling/CommandType.js";
import { DesignerToolRenderer } from "../designerToolbarGenerics/designerToolRenderer.js";
import "../designerToolbarGenerics/designerToolsButtons.js";
import "../designerToolbarPopups/DrawToolPopup.js";
import "../designerToolbarPopups/SelectorToolsPopup.js";
export class DesignerToolbar extends BaseCustomWebComponentConstructorAppend {
    static style = css `
        node-projects-designer-tools-buttons {
            height: 100%;
            width: 100%;
        }

        #popups {
            position: absolute;
            top: calc(0px + 10px);
            height: 100%;
            left: calc(24px + 4px + 10px);
        }

        #popups > * {
            display: none;
        }

        #popups > *[opened] {
            display: block;
        }`;
    static template = html `
        <node-projects-designer-tools-buttons id="tool-buttons"></node-projects-designer-tools-buttons>
        <div id="popups">
            <node-projects-designer-popup-drawtool popup="draw" class="popup" title="Drawtools" tabindex="-1"></node-projects-designer-popup-drawtool>
            <node-projects-designer-popup-selector popup="selector" class="popup" title="Selectors" tabindex="-1"></node-projects-designer-popup-selector>
        </div>`;
    _designerView;
    _toolButtonsElem;
    _toolPopupElems;
    _serviceContainer;
    _prevSelected = [];
    async ready() {
        this._toolButtonsElem = this._getDomElement("tool-buttons");
        this._toolButtonsElem.toolActivated.on((toolActivated => {
            this._toolButtonActivated(toolActivated[0], toolActivated[1]);
        }));
        this._registerPopups();
        let categories = [];
        await this._waitForChildrenReady();
        //TODO: warum macht das nicht alles die tools buttons liste selbst????
        let tools = [];
        for (let tool of this._toolButtonsElem.toolCollection) {
            if (!categories.includes(tool.category)) {
                tools.push(DesignerToolRenderer.createToolFromObject(tool));
                categories.push(tool.category);
            }
        }
        this._toolButtonsElem.setToolsExternal(tools);
    }
    initialize(serviceContainer, designerView) {
        this._serviceContainer = serviceContainer;
        this._serviceContainer.globalContext.onToolChanged.on((e) => {
            let command_name;
            let found = false;
            this._serviceContainer.designerTools.forEach((tool, key) => {
                if (tool === e.newValue && !found) {
                    command_name = key;
                    found = true;
                    this._toolButtonsElem.externalToolChange(command_name);
                }
            });
        });
        this._designerView = designerView;
    }
    _registerPopups() {
        let popups = this._getDomElement("popups");
        this._toolPopupElems = [...popups.querySelectorAll('.popup')];
        //DrawToolPopup
        let drawToolPopup = popups.querySelectorAll("node-projects-designer-popup-drawtool")[0];
        drawToolPopup.toolActivated.on((toolArg) => this._popupToolSelected(drawToolPopup, toolArg));
    }
    _toolButtonActivated(tool, external) {
        this._hideAllPopups();
        this._prevSelected[1] = this._prevSelected[0];
        this._prevSelected[0] = tool;
        if (!external) {
            if (this._isPopupScenario()) {
                this._resetPreviousElements();
                this._activatePopup(tool.category);
            }
        }
        this._toolButtonsElem.markToolAsSelected(tool.command_parameter);
        let command = {
            type: CommandType.setTool,
            parameter: tool.command_parameter,
        };
        this._designerView.executeCommand(command);
    }
    _activatePopup(category) {
        this._toolPopupElems.find(x => x.getAttribute("popup") == category)?.setAttribute("opened", "");
    }
    _popupToolSelected(popup, tool) {
    }
    _isPopupScenario() {
        return JSON.stringify(this._prevSelected[1]) === JSON.stringify(this._prevSelected[0]);
    }
    _resetPreviousElements() {
        for (let i = 0; i < this._prevSelected.length; i++) {
            this._prevSelected[i] = null;
        }
    }
    _hideAllPopups() {
        for (let popup of this._toolPopupElems) {
            popup.removeAttribute("opened");
        }
    }
}
customElements.define('node-projects-designer-toolbar', DesignerToolbar);
