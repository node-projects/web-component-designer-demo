import { BaseCustomWebComponentConstructorAppend, css, html, TypedEvent } from '/web-component-designer-demo/node_modules/@node-projects/base-custom-webcomponent/./dist/index.js';
import { assetsPath } from "../../../../../Constants.js";
import { NamedTools } from "../NamedTools.js";
import { DesignerToolRenderer } from "./designerToolRenderer.js";
export class DesignerToolsButtons extends BaseCustomWebComponentConstructorAppend {
    static style = css `
    .toolbar-host{
        width: calc(100% - 2px);
        height: calc(100% - 2px);
        border: 1px solid black;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
    }

    .tool {
        height: 32px;
        width: 32px;
        background-color: rgb(255, 255, 255);
        background-size: 65%;
        background-repeat: no-repeat;
        background-position: center center;
        flex-shrink: 0;
        border-bottom: 1px solid black;
    }

    .tool[selected] {
        background-color: rgb(47, 53, 69);
    }

    .tool:hover {
        cursor: pointer;
    }
`;
    static template = html `
        <div id="toolbar-host" class="toolbar-host"></div>`;
    toolActivated = new TypedEvent();
    _toolButtons;
    _toolCollection;
    _toolbarhost;
    ready() {
        this._initToolCategories();
        this._toolbarhost = this._getDomElement("toolbar-host");
    }
    setToolsExternal(tools) {
        for (let tool of tools) {
            this._toolbarhost.appendChild(tool);
        }
        this._createToolEventListeners();
    }
    _initToolCategories() {
        let toolCollection = [];
        toolCollection.push({ tool: NamedTools.Pointer, category: "pointer", command: "setTool", command_parameter: NamedTools.Pointer, title: "Pointer Tool", background_url: "url(" + assetsPath + "images/layout/PointerTool.svg)" });
        toolCollection.push({ tool: NamedTools.MagicWandSelector, category: "selector", command: "setTool", command_parameter: NamedTools.MagicWandSelector, title: "Magic Wand Selector", background_url: "url(" + assetsPath + "images/layout/MagicWandTool.svg)" });
        toolCollection.push({ tool: NamedTools.RectangleSelector, category: "selector", command: "setTool", command_parameter: NamedTools.RectangleSelector, title: "Rectangle Selector", background_url: "url(" + assetsPath + "images/layout/SelectRectTool.svg)" });
        toolCollection.push({ tool: NamedTools.DrawLine, category: "draw", command: "setTool", command_parameter: NamedTools.DrawLine, title: "Draw Line", background_url: "url(" + assetsPath + "images/layout/DrawLineTool.svg)" });
        toolCollection.push({ tool: NamedTools.DrawPath, category: "draw", command: "setTool", command_parameter: NamedTools.DrawPath, title: "Draw Path", background_url: "url(" + assetsPath + "images/layout/DrawPathTool.svg)" });
        toolCollection.push({ tool: NamedTools.DrawRect, category: "draw", command: "setTool", command_parameter: NamedTools.DrawRect, title: "Draw Rectangle", background_url: "url(" + assetsPath + "images/layout/DrawRectTool.svg)" });
        toolCollection.push({ tool: NamedTools.DrawEllipsis, category: "draw", command: "setTool", command_parameter: NamedTools.DrawEllipsis, title: "Draw Ellipsis", background_url: "url(" + assetsPath + "images/layout/DrawEllipTool.svg)" });
        toolCollection.push({ tool: NamedTools.Zoom, category: "zoom", command: "setTool", command_parameter: NamedTools.Zoom, title: "Zoom Tool", background_url: "url(" + assetsPath + "images/layout/ZoomTool.svg)" });
        toolCollection.push({ tool: NamedTools.Text, category: "text", command: "setTool", command_parameter: NamedTools.Text, title: "Text Tool", background_url: "url(" + assetsPath + "images/layout/TextTool.svg)" });
        toolCollection.push({ tool: NamedTools.TextBoc, category: "text", command: "setTool", command_parameter: NamedTools.TextBoc, title: "Textbox Tool", background_url: "url(" + assetsPath + "images/layout/TextBoxTool.svg)" });
        toolCollection.push({ tool: NamedTools.PickColor, category: "pick", command: "setTool", command_parameter: NamedTools.PickColor, title: "Color Picker", background_url: "url(" + assetsPath + "images/layout/ColorPickerTool.svg)" });
        this._toolCollection = toolCollection;
    }
    _createToolEventListeners() {
        this._toolButtons = [...this._toolbarhost.querySelectorAll('div.tool')];
        for (let tool of this._toolButtons) {
            tool.addEventListener("click", () => this._toolSelected(tool, false));
        }
    }
    _toolSelected(tool, external) {
        this.toolActivated.emit([DesignerToolRenderer.createObjectFromTool(tool), external]);
    }
    markToolAsSelected(id) {
        this._unselectTools();
        let selectedElement = this._toolButtons.find(t => t.getAttribute("data-command-parameter") == id);
        selectedElement?.setAttribute("selected", "");
    }
    _unselectTools() {
        for (let tool of this._toolButtons) {
            tool.removeAttribute("selected");
        }
    }
    externalToolChange(command_name) {
        let tool = this._toolButtons.find(x => x.getAttribute("data-command-parameter") == command_name);
        if (tool != null) {
            this._toolSelected(tool, true);
        }
    }
    get toolCollection() {
        return this._toolCollection;
    }
}
customElements.define('node-projects-designer-tools-buttons', DesignerToolsButtons);
