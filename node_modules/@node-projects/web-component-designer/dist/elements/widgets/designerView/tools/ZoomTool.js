import { EventNames } from '../../../../index.js';
export class ZoomTool {
    cursor = 'zoom-in';
    _startPoint;
    _endPoint;
    _pointerMovementTolerance = 5;
    _zoomStepSize = 0.2; //number x 100 = Scale in percent
    activated(serviceContainer) {
    }
    pointerEventHandler(designerCanvas, event, currentElement) {
        const eventPoint = designerCanvas.getViewportCoordinates(event);
        switch (event.type) {
            case EventNames.PointerDown:
                this._startPoint = eventPoint;
                break;
            case EventNames.PointerUp:
                this._endPoint = eventPoint;
                let isLeftClick = event.button == 0;
                switch (event.button) {
                    case 0: //Left-Click
                    case 2: //Right-Click
                        this._zoomOnto(isLeftClick, this._startPoint, this._endPoint, designerCanvas);
                        break;
                }
                break;
        }
    }
    _zoomOnto(isZoomInto, startPoint, endPoint, designerCanvas) {
        if (this._isPositionEqual(startPoint, endPoint)) {
            const oldZoom = designerCanvas.zoomFactor;
            const newZoom = isZoomInto ? oldZoom + this._zoomStepSize : oldZoom - this._zoomStepSize;
            designerCanvas.zoomTowardsPointer(endPoint, newZoom);
        }
        else {
        }
    }
    _isPositionEqual(startPoint, endPoint) {
        let tolerance = this._pointerMovementTolerance;
        return Math.abs(startPoint.x - endPoint.x) <= tolerance && Math.abs(startPoint.y - endPoint.y) <= tolerance;
    }
    keyboardEventHandler(designerCanvas, event, currentElement) { }
    dispose() {
    }
}
