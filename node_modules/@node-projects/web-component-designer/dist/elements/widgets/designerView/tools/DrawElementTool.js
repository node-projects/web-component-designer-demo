import { EventNames } from "../../../../enums/EventNames.js";
export class DrawElementTool {
  constructor(elementDefinition) {
    this._elementDefinition = elementDefinition;
  }

  dispose() {
    if (this._createdItem) this._createdItem.element.parentElement.removeChild(this._createdItem.element);
  }

  get cursor() {
    return 'crosshair';
  }

  pointerEventHandler(designerView, event, currentElement) {
    switch (event.type) {
      case EventNames.PointerDown:
        this._onPointerDown(designerView, event);

        break;

      case EventNames.PointerMove:
        this._onPointerMove(designerView, event);

        break;

      case EventNames.PointerUp:
        this._onPointerUp(designerView, event);

        break;
    }
  }

  async _onPointerDown(designerView, event) {
    event.preventDefault();
    this._startPosition = {
      x: event.x,
      y: event.y
    };
    this._createdItem = await designerView.serviceContainer.forSomeServicesTillResult("instanceService", service => service.getElement(this._elementDefinition, designerView.serviceContainer, designerView.instanceServiceContainer));
    const targetRect = event.target.getBoundingClientRect();

    this._createdItem.setStyle('position', 'absolute');

    this._createdItem.setStyle('top', event.offsetY + targetRect.top - designerView.containerBoundingRect.y + 'px');

    this._createdItem.setStyle('left', event.offsetX + targetRect.left - designerView.containerBoundingRect.x + 'px');

    this._createdItem.setStyle('width', '0');

    this._createdItem.setStyle('height', '0');

    this._createdItem.element.style.overflow = 'hidden';
    designerView.rootDesignItem.element.appendChild(this._createdItem.element); //this.instanceServiceContainer.undoService.execute(new InsertAction(this.rootDesignItem, this._canvas.children.length, di));
    //grp.commit();
    //this.instanceServiceContainer.selectionService.setSelectedElements([di]);
  }

  async _onPointerMove(designerView, event) {
    if (this._createdItem) {
      this._createdItem.setStyle('width', event.x - this._startPosition.x + 'px');

      this._createdItem.setStyle('height', event.y - this._startPosition.y + 'px');

      designerView.rootDesignItem.element.appendChild(this._createdItem.element);
    }
  }

  async _onPointerUp(designerView, event) {
    this._createdItem = null;
    this._startPosition = null;
    designerView.serviceContainer.tool = null;
  }

}