import { html, TypedEvent } from '/web-component-designer-demo/node_modules/@node-projects/base-custom-webcomponent/./dist/index.js';
import { assetsPath } from '../../../../../Constants.js';
import { DesignerToolbarPopup } from '../designerToolbarGenerics/designerToolbarPopup.js';
import { DesignerToolbarPopupToolSelect } from '../designerToolbarGenerics/designerToolbarPopupToolSelect.js';
export class DrawToolPopup extends DesignerToolbarPopup {
    templateToolSelect = html `
        <div class="tool" data-command="setTool" popup="draw" data-command-parameter="DrawLine" title="Draw Line" style="background-image: url('${assetsPath}images/layout/DrawLineTool.svg');"></div>
        <div class="tool" data-command="setTool" data-command-parameter="DrawPath" title="Pointer Tool" style="background-image: url('${assetsPath}images/layout/DrawPathTool.svg');"></div>
        <div class="tool" data-command="setTool" data-command-parameter="DrawRect" title="Draw Rectangle" style="background-image: url('${assetsPath}images/layout/DrawRectTool.svg');"></div>
        <div class="tool" data-command="setTool" data-command-parameter="DrawEllipsis" title="Draw Ellipsis" style="background-image: url('${assetsPath}images/layout/DrawEllipTool.svg');"></div>
    `;
    toolActivated = new TypedEvent();
    ready() {
        this._setTitle(this.getAttribute("title"));
        let toolSelect = new DesignerToolbarPopupToolSelect();
        toolSelect.insertToolContent(this.templateToolSelect);
        toolSelect.toolActivated.on((toolArg) => {
            this.toolActivated.emit(toolArg);
        });
        let content = [];
        content.push(toolSelect);
        this._setContent(content);
    }
}
customElements.define('node-projects-designer-popup-drawtool', DrawToolPopup);
