import { moveCursorToEnd } from '/web-component-designer-demo/node_modules/@deckdeckgo/utils/lib/esm/index.js';
import configStore from '../stores/config.store.js';
import containerStore from '../stores/container.store.js';
import { findNodeAtDepths, toHTMLElement } from '../utils/node.utils.js';
import { createNewParagraph, findParagraph, isStartNode } from '../utils/paragraph.utils.js';
import { getRange } from '../utils/selection.utils.js';
import { beforeInputTransformer, transformInput } from '../utils/transform.utils.js';
export class InputEvents {
  constructor() {
    this.lastBeforeInput = undefined;
    this.onBeforeInput = async ($event) => {
      await this.preventTextLeaves($event);
      await this.transformInput($event);
    };
    this.onKeyDown = ($event) => {
      // This should be an on keydown listener because Firefox do not provide the same range in before input
      this.deleteSelection($event);
    };
  }
  init() {
    var _a, _b;
    (_a = containerStore.state.ref) === null || _a === void 0 ? void 0 : _a.addEventListener('beforeinput', this.onBeforeInput);
    (_b = containerStore.state.ref) === null || _b === void 0 ? void 0 : _b.addEventListener('keydown', this.onKeyDown);
  }
  destroy() {
    var _a, _b;
    (_a = containerStore.state.ref) === null || _a === void 0 ? void 0 : _a.removeEventListener('beforeinput', this.onBeforeInput);
    (_b = containerStore.state.ref) === null || _b === void 0 ? void 0 : _b.removeEventListener('keydown', this.onKeyDown);
  }
  async preventTextLeaves($event) {
    var _a;
    const { range, selection } = getRange(containerStore.state.ref);
    if (!range) {
      return;
    }
    const anchorNode = selection === null || selection === void 0 ? void 0 : selection.anchorNode;
    if (!containerStore.state.ref.isEqualNode(anchorNode)) {
      return;
    }
    const { data } = $event;
    // User is not typing, for example an image is moved
    if (data === null) {
      return;
    }
    const { startOffset } = range;
    const target = findNodeAtDepths({
      parent: containerStore.state.ref,
      indexDepths: [startOffset]
    });
    // We create a div - i.e. new HTML element - only if the actual target an editable paragraph that accepts text
    if ((_a = configStore.state.textParagraphs) === null || _a === void 0 ? void 0 : _a.includes(target === null || target === void 0 ? void 0 : target.nodeName.toLowerCase())) {
      return;
    }
    // User is typing text at the root of the container therefore the browser will create a text node a direct descendant of the contenteditable
    // This can happen when user types for example before or after an image
    $event.preventDefault();
    const div = await createNewParagraph({
      container: containerStore.state.ref,
      range,
      text: data
    });
    moveCursorToEnd(div);
  }
  async transformInput($event) {
    var _a;
    const { data } = $event;
    const transformer = beforeInputTransformer.find(({ match }) => match({ key: { key: data }, lastKey: this.lastBeforeInput }));
    if (transformer !== undefined) {
      await transformInput({ $event, transformInput: transformer });
      await ((_a = transformer.postTransform) === null || _a === void 0 ? void 0 : _a.call(transformer));
      this.lastBeforeInput = undefined;
      return;
    }
    this.lastBeforeInput = { key: data };
  }
  deleteSelection($event) {
    const { key } = $event;
    if (!['Delete', 'Backspace'].includes(key)) {
      return;
    }
    const { range } = getRange(containerStore.state.ref);
    if (!range) {
      return;
    }
    // If the commonAncestorContainer is the container then we have selected multiple paragraphs
    if (!containerStore.state.ref.isEqualNode(range === null || range === void 0 ? void 0 : range.commonAncestorContainer)) {
      return;
    }
    // If first char is a zeroWidthSpace and the offset start at the second character, reset range to begin
    const zeroWidthSpace = range.startOffset === 1 && range.startContainer.textContent.charAt(0) === '\u200B';
    if (zeroWidthSpace) {
      range.setStart(range.startContainer, 0);
    }
    // We don't have a selection that starts at the beginning of an element and paragraph
    if (range.startOffset > 0) {
      return;
    }
    // We don't have a selection that starts at the beginning of a paragraph
    if (!isStartNode({ element: range.startContainer, container: containerStore.state.ref })) {
      return;
    }
    const paragraph = toHTMLElement(findParagraph({ element: range.startContainer, container: containerStore.state.ref }));
    if (!paragraph) {
      return;
    }
    // Reset range to begin of the paragraph in case it contains children
    range.setStartBefore(paragraph);
    $event.preventDefault();
    $event.stopImmediatePropagation();
    range.deleteContents();
  }
}
