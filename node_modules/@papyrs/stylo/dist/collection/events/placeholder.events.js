import configStore from '../stores/config.store.js';
import containerStore from '../stores/container.store.js';
import { elementIndex, isTextNode } from '../utils/node.utils.js';
import { findParagraph, isParagraphEmpty } from '../utils/paragraph.utils.js';
export class PlaceholderEvents {
  constructor() {
    this.onSelectParagraph = ({ detail }) => {
      var _a, _b, _c, _d, _e, _f;
      const firstParagraph = (_a = containerStore.state.ref) === null || _a === void 0 ? void 0 : _a.firstElementChild;
      const secondParagraph = (_b = containerStore.state.ref) === null || _b === void 0 ? void 0 : _b.children[1];
      const first = firstParagraph && detail && detail.isEqualNode(firstParagraph);
      const second = secondParagraph && detail && detail.isEqualNode(secondParagraph);
      (_c = containerStore.state.ref) === null || _c === void 0 ? void 0 : _c.removeEventListener('keydown', this.onKeyChange);
      (_d = containerStore.state.ref) === null || _d === void 0 ? void 0 : _d.removeEventListener('keyup', this.onKeyChange);
      if (first || second) {
        (_e = containerStore.state.ref) === null || _e === void 0 ? void 0 : _e.addEventListener('keydown', this.onKeyChange);
        (_f = containerStore.state.ref) === null || _f === void 0 ? void 0 : _f.addEventListener('keyup', this.onKeyChange);
      }
      this.classesEmpty();
      this.cleanEmpty();
    };
    this.onKeyChange = () => {
      var _a;
      const paragraph = findParagraph({
        element: (_a = getSelection()) === null || _a === void 0 ? void 0 : _a.anchorNode,
        container: containerStore.state.ref
      });
      if (!paragraph || isTextNode(paragraph)) {
        return;
      }
      this.toggleClassEmpty(paragraph);
    };
  }
  init({ editorRef }) {
    var _a, _b;
    this.editorRef = editorRef;
    (_a = this.editorRef) === null || _a === void 0 ? void 0 : _a.addEventListener('selectParagraph', this.onSelectParagraph);
    (_b = containerStore.state.ref) === null || _b === void 0 ? void 0 : _b.addEventListener('focusin', this.onSelectParagraph, { passive: true });
    this.classesEmpty();
  }
  destroy() {
    var _a, _b;
    (_a = this.editorRef) === null || _a === void 0 ? void 0 : _a.removeEventListener('selectParagraph', this.onSelectParagraph);
    (_b = containerStore.state.ref) === null || _b === void 0 ? void 0 : _b.removeEventListener('focusin', this.onSelectParagraph);
  }
  classesEmpty() {
    var _a, _b;
    const firstParagraph = (_a = containerStore.state.ref) === null || _a === void 0 ? void 0 : _a.firstElementChild;
    const secondParagraph = (_b = containerStore.state.ref) === null || _b === void 0 ? void 0 : _b.children[1];
    this.classEmpty(firstParagraph);
    this.classEmpty(secondParagraph);
  }
  classEmpty(element) {
    if (!element) {
      return;
    }
    const paragraph = findParagraph({
      element,
      container: containerStore.state.ref
    });
    if (!paragraph || isTextNode(paragraph)) {
      return;
    }
    this.toggleClassEmpty(paragraph);
  }
  toggleClassEmpty(paragraph) {
    var _a;
    const { classList, nodeName } = paragraph;
    if (!configStore.state.textParagraphs.includes(nodeName.toLowerCase())) {
      classList.remove('stylo-placeholder-empty');
      return;
    }
    const empty = isParagraphEmpty({ paragraph });
    const index = elementIndex(paragraph);
    // We add a placeholder for the title if empty.
    // We can display a placeholder for the second element if there are no other paragraphs, a bit weird to display a placeholder if user has began typing in another paragraph
    if (empty && (index === 0 || ((_a = containerStore.state.ref) === null || _a === void 0 ? void 0 : _a.children.length) <= 2)) {
      classList.add('stylo-placeholder-empty');
      return;
    }
    classList.remove('stylo-placeholder-empty');
  }
  /**
   * If a paragraph is added between the two first placeholder the new div might be created with a copy of this class so we clean it
   */
  cleanEmpty() {
    var _a;
    const elements = (_a = containerStore.state.ref) === null || _a === void 0 ? void 0 : _a.querySelectorAll('.stylo-empty');
    const others = Array.from(elements || []).filter((element) => elementIndex(element) > 1);
    for (const other of others) {
      other.classList.remove('stylo-empty');
    }
  }
}
