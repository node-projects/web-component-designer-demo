import { moveCursorToEnd } from '/web-component-designer-demo/node_modules/@deckdeckgo/utils/lib/esm/index.js';
import containerStore from '../stores/container.store.js';
import { isTextNode } from '../utils/node.utils.js';
import { findParagraph } from '../utils/paragraph.utils.js';
import { getRange } from '../utils/selection.utils.js';
export class TabEvents {
  constructor() {
    this.onKeyDown = ($event) => {
      const { key, shiftKey } = $event;
      if (!['Tab'].includes(key) || shiftKey) {
        return;
      }
      this.catchTab($event);
    };
  }
  init() {
    var _a;
    (_a = containerStore.state.ref) === null || _a === void 0 ? void 0 : _a.addEventListener('keydown', this.onKeyDown);
  }
  destroy() {
    var _a;
    (_a = containerStore.state.ref) === null || _a === void 0 ? void 0 : _a.removeEventListener('keydown', this.onKeyDown);
  }
  catchTab($event) {
    const { range, selection } = getRange(containerStore.state.ref);
    if (!range) {
      return;
    }
    $event.preventDefault();
    const node = selection === null || selection === void 0 ? void 0 : selection.focusNode;
    if (!isTextNode(node)) {
      const paragraph = findParagraph({
        element: node,
        container: containerStore.state.ref
      });
      if (paragraph !== undefined) {
        this.createTabulation({ range });
        return;
      }
      return;
    }
    this.createTabulation({ range });
  }
  createTabulation({ range }) {
    const span = document.createElement('span');
    span.innerHTML = '\u0009';
    range === null || range === void 0 ? void 0 : range.insertNode(span);
    moveCursorToEnd(span);
  }
}
