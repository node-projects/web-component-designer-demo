import { toHTMLElement } from './node.utils';
import { findParagraph } from './paragraph.utils';
export function execCommandList(selection, action, container) {
  const anchorNode = selection.anchorNode;
  if (!anchorNode) {
    return;
  }
  const anchor = toHTMLElement(findParagraph({ element: anchorNode, container }));
  if (!anchor) {
    return;
  }
  // Did the user select the all list
  if (anchor.nodeName.toLowerCase() === action.type) {
    removeList(anchor);
    return;
  }
  if (!['ol', 'ul', 'dl'].includes(anchor.nodeName.toLowerCase())) {
    createList(anchor, selection, action.type);
    return;
  }
  // Create a brand new list
  cloneList(anchor, selection, action.type);
  removeList(anchor, false);
}
function createList(container, selection, type) {
  const range = selection.getRangeAt(0);
  const fragment = range.extractContents();
  const list = document.createElement(type);
  const li = document.createElement('li');
  li.style.cssText = container.style.cssText;
  li.appendChild(fragment);
  list.appendChild(li);
  range.insertNode(list);
  selection.selectAllChildren(list);
}
function cloneList(container, selection, type) {
  const list = document.createElement(type);
  list.append(...Array.from(container.childNodes));
  Array.from(container.attributes).forEach((attr) => list.setAttribute(attr.nodeName, attr.nodeValue));
  container.parentElement.insertBefore(list, container);
  selection.selectAllChildren(list);
}
function removeList(list, preserveChildren = true) {
  if (list.hasChildNodes() && preserveChildren) {
    Array.from(list.childNodes).forEach((child) => {
      if (child.hasChildNodes() &&
        child.childNodes.length > 1 &&
        child.firstChild.nodeType !== Node.TEXT_NODE &&
        child.firstChild.nodeType !== Node.COMMENT_NODE) {
        const span = document.createElement('span');
        span.append(...Array.from(child.childNodes));
        list.parentElement.insertBefore(span, list);
      }
      else {
        const text = document.createTextNode(child.textContent);
        list.parentElement.insertBefore(text, list);
      }
    });
  }
  list.parentElement.removeChild(list);
}
//# sourceMappingURL=execcommand-list.utils.js.map
