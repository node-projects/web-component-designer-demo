import { isRTL } from '@deckdeckgo/utils';
import { ToolbarAlign, ToolbarFontSize, ToolbarList } from '../types/toolbar';
import { toHTMLElement } from './node.utils';
import { isParagraph } from './paragraph.utils';
export const findStyleNode = (node, style, container) => {
  // Just in case
  if (node.nodeName.toUpperCase() === 'HTML' || node.nodeName.toUpperCase() === 'BODY') {
    return null;
  }
  if (!node.parentNode) {
    return null;
  }
  if (isParagraph({ element: node, container })) {
    return null;
  }
  const { style: elementStyle } = toHTMLElement(node);
  const hasStyle = elementStyle[style] !== null && elementStyle[style] !== undefined && elementStyle[style] !== '';
  if (hasStyle) {
    return node;
  }
  return findStyleNode(node.parentNode, style, container);
};
export const getBold = (element) => {
  if (isTag(element, 'b')) {
    return 'bold';
  }
  if (isTag(element, 'strong')) {
    return 'bold';
  }
  return element.style.fontWeight === 'bold'
    ? 'bold'
    : element.style.fontWeight === 'initial'
      ? 'initial'
      : undefined;
};
export const getFontSize = (element) => {
  if (!element) {
    return undefined;
  }
  if (element.hasAttribute('size')) {
    return element.getAttribute('size');
  }
  return element.style.fontSize !== ''
    ? ToolbarFontSize[element.style.fontSize.replace('-', '_').toUpperCase()]
    : undefined;
};
export const getContentAlignment = (element) => {
  const style = window.getComputedStyle(element);
  if (style.textAlign === 'center') {
    return ToolbarAlign.CENTER;
  }
  else if (style.textAlign === 'right') {
    return ToolbarAlign.RIGHT;
  }
  else if (style.textAlign === 'left') {
    return ToolbarAlign.LEFT;
  }
  return isRTL() ? ToolbarAlign.RIGHT : ToolbarAlign.LEFT;
};
export const getList = (element) => {
  if (!element) {
    return undefined;
  }
  if (element.nodeName &&
    element.nodeName.toLowerCase() === 'li' &&
    element.parentElement &&
    element.parentElement.nodeName) {
    return element.parentElement.nodeName.toLowerCase() === 'ol'
      ? ToolbarList.ORDERED
      : element.parentElement.nodeName.toLowerCase() === 'ul'
        ? ToolbarList.UNORDERED
        : undefined;
  }
  return undefined;
};
export const getStrikeThrough = (element) => {
  var _a, _b, _c, _d, _e;
  if (isTag(element, 'strike')) {
    return 'strikethrough';
  }
  if (((_a = element.style.textDecoration) === null || _a === void 0 ? void 0 : _a.indexOf('line-through')) > -1 ||
    ((_b = element.style.textDecorationLine) === null || _b === void 0 ? void 0 : _b.indexOf('line-through')) > -1) {
    return 'strikethrough';
  }
  if (((_c = element.style.textDecoration) === null || _c === void 0 ? void 0 : _c.indexOf('initial')) > -1 ||
    ((_d = element.style.textDecorationLine) === null || _d === void 0 ? void 0 : _d.indexOf('initial')) > -1) {
    return 'initial';
  }
  if (!element.hasChildNodes()) {
    return undefined;
  }
  const children = element.children;
  if (children && children.length > 0) {
    const selectedChild = Array.from(children).find((child) => {
      var _a, _b, _c;
      return (((_a = child.style.textDecoration) === null || _a === void 0 ? void 0 : _a.indexOf('line-through')) > -1 ||
        ((_b = child.style.textDecorationLine) === null || _b === void 0 ? void 0 : _b.indexOf('line-through')) > -1 ||
        ((_c = child.style.textDecorationLine) === null || _c === void 0 ? void 0 : _c.indexOf('initial')) > -1);
    });
    if (selectedChild) {
      return ((_e = selectedChild.style.fontStyle) === null || _e === void 0 ? void 0 : _e.indexOf('line-through')) > -1
        ? 'strikethrough'
        : 'initial';
    }
  }
  return undefined;
};
export const getUnderline = (element) => {
  var _a, _b, _c, _d, _e;
  if (isTag(element, 'u')) {
    return 'underline';
  }
  if (((_a = element.style.textDecoration) === null || _a === void 0 ? void 0 : _a.indexOf('underline')) > -1 ||
    ((_b = element.style.textDecorationLine) === null || _b === void 0 ? void 0 : _b.indexOf('underline')) > -1) {
    return 'underline';
  }
  if (((_c = element.style.textDecoration) === null || _c === void 0 ? void 0 : _c.indexOf('initial')) > -1 ||
    ((_d = element.style.textDecorationLine) === null || _d === void 0 ? void 0 : _d.indexOf('initial')) > -1) {
    return 'initial';
  }
  if (!element.hasChildNodes()) {
    return undefined;
  }
  const children = element.children;
  if (children && children.length > 0) {
    const selectedChild = Array.from(children).find((child) => {
      var _a, _b, _c;
      return (((_a = child.style.textDecoration) === null || _a === void 0 ? void 0 : _a.indexOf('underline')) > -1 ||
        ((_b = child.style.textDecorationLine) === null || _b === void 0 ? void 0 : _b.indexOf('underline')) > -1 ||
        ((_c = child.style.textDecorationLine) === null || _c === void 0 ? void 0 : _c.indexOf('initial')) > -1);
    });
    if (selectedChild) {
      return ((_e = selectedChild.style.fontStyle) === null || _e === void 0 ? void 0 : _e.indexOf('underline')) > -1 ? 'underline' : 'initial';
    }
  }
  return undefined;
};
export const getItalic = (element) => {
  if (isTag(element, 'i')) {
    return 'italic';
  }
  if (isTag(element, 'em')) {
    return 'italic';
  }
  if (element.style.fontStyle === 'italic') {
    return 'italic';
  }
  if (element.style.fontStyle === 'initial') {
    return 'initial';
  }
  if (!element.hasChildNodes()) {
    return undefined;
  }
  const children = element.children;
  if (children && children.length > 0) {
    const selectedChild = Array.from(children).find((child) => {
      return child.style.fontStyle === 'italic' || child.style.fontStyle === 'initial';
    });
    if (selectedChild) {
      return selectedChild.style.fontStyle === 'italic' ? 'italic' : 'initial';
    }
  }
  return undefined;
};
const isTag = (element, tagName) => {
  if (!element) {
    return false;
  }
  if (element.nodeName.toLowerCase() === tagName) {
    return true;
  }
  if (element.hasChildNodes()) {
    const children = element.getElementsByTagName(tagName);
    return children && children.length > 0;
  }
  return false;
};
//# sourceMappingURL=toolbar.utils.js.map
