import { debounce, hexToRgb } from '@deckdeckgo/utils';
import { h, Host } from '@stencil/core';
import { DEFAULT_PALETTE } from '../../../types/palette';
export class Color {
  constructor() {
    this.debounceInitSelectedColorPalette = debounce(() => {
      this.selectedColorPalette = this.initSelectedColorPalette();
      this.selectedCustomColorRgb = !this.selectedColorPalette ? this.selectedColorRgb : undefined;
    }, 150);
    this.selectColor = ($event) => {
      const color = $event.detail;
      this.applyColorHexChange(color.hex, color.rgb);
      this.colorChange.emit(color);
    };
    this.palette = DEFAULT_PALETTE;
    this.inputAlt = 'Input a color (hex)';
    this.colorHex = undefined;
    this.colorRgb = undefined;
    this.selectedColorHex = undefined;
    this.selectedColorRgb = undefined;
    this.selectedColorPalette = false;
    this.selectedCustomColorRgb = undefined;
  }
  componentWillLoad() {
    this.selectedColorHex = this.colorHex;
    this.selectedColorRgb = this.colorRgb ? this.colorRgb : hexToRgb(this.colorHex);
    this.selectedColorPalette = this.initSelectedColorPalette();
    if (!this.selectedColorPalette) {
      this.selectedCustomColorRgb = this.selectedColorRgb;
    }
  }
  async onColorHexChange() {
    this.applyColorHexChange(this.colorHex, undefined);
  }
  applyColorHexChange(colorHex, colorRgb) {
    this.selectedColorHex = colorHex;
    this.selectedColorRgb = colorRgb;
    this.debounceInitSelectedColorPalette();
    // Render component again
    this.palette = [...this.palette];
  }
  async onColorRgbChange() {
    this.selectedColorHex = undefined;
    this.selectedColorRgb = this.colorRgb;
    this.debounceInitSelectedColorPalette();
    // Render component again
    this.palette = [...this.palette];
  }
  pickColor(paletteColor) {
    if (!this.palette || this.palette.length <= 0) {
      return;
    }
    this.selectedColorHex = paletteColor.color ? paletteColor.color.hex : undefined;
    this.selectedColorRgb = paletteColor.color ? paletteColor.color.rgb : undefined;
    this.colorChange.emit(paletteColor.color);
    this.selectedColorPalette = true;
    this.selectedCustomColorRgb = undefined;
  }
  isHexColorSelected(element) {
    if (!element || !element.color || !element.color.hex) {
      return false;
    }
    if (!this.selectedColorHex) {
      return false;
    }
    return this.selectedColorHex.toUpperCase() === element.color.hex.toUpperCase();
  }
  isRgbColorSelected(element) {
    if (!element || !element.color || !element.color.rgb) {
      return false;
    }
    if (!this.selectedColorRgb) {
      return false;
    }
    return (this.selectedColorRgb.replace(/\s/g, '').toUpperCase() ===
      element.color.rgb.replace(/\s/g, '').toUpperCase());
  }
  initSelectedColorPalette() {
    if (!this.palette || this.palette.length <= 0) {
      return false;
    }
    const index = this.palette.findIndex((element) => {
      return this.isHexColorSelected(element) || this.isRgbColorSelected(element);
    });
    return index > -1;
  }
  render() {
    return (h(Host, null, this.renderPalette(), this.renderInput()));
  }
  renderPalette() {
    if (this.palette && this.palette.length > 0) {
      return this.palette.map((element) => {
        const style = {
          '--stylo-palette-color-hex': `${element.color.hex}`,
          '--stylo-palette-color-rgb': `${element.color.rgb}`
        };
        if (element.display) {
          style['--stylo-palette-border-color'] = element.display.borderColor;
          style['--stylo-palette-box-shadow-color'] = element.display.boxShadowColor;
        }
        return (h("button", { "aria-label": element.alt, class: this.isHexColorSelected(element) || this.isRgbColorSelected(element)
            ? 'selected'
            : undefined, style: style, onClick: ($event) => {
            $event.stopPropagation();
            this.pickColor(element);
          } }));
      });
    }
    else {
      return undefined;
    }
  }
  renderInput() {
    return (h("stylo-color-input", { colorHex: this.selectedColorHex, colorRgb: this.selectedColorRgb, customColorRgb: this.selectedCustomColorRgb, inputAlt: this.inputAlt, onSelectHexColor: this.selectColor }));
  }
  static get is() { return "stylo-color"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["color.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["color.css"]
    };
  }
  static get properties() {
    return {
      "palette": {
        "type": "unknown",
        "mutable": true,
        "complexType": {
          "original": "StyloPalette[]",
          "resolved": "StyloPalette[]",
          "references": {
            "StyloPalette": {
              "location": "import",
              "path": "../../../types/palette"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The palette of color."
        },
        "defaultValue": "DEFAULT_PALETTE"
      },
      "inputAlt": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "An accessibility label for the color input field"
        },
        "attribute": "input-alt",
        "reflect": false,
        "defaultValue": "'Input a color (hex)'"
      },
      "colorHex": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The current selected color provided as hexadecimal value"
        },
        "attribute": "color-hex",
        "reflect": false
      },
      "colorRgb": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The current selected color provided as a rgb value (without \"rgb()\", only value such as for example 255, 67, 54)"
        },
        "attribute": "color-rgb",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "selectedColorHex": {},
      "selectedColorRgb": {},
      "selectedColorPalette": {},
      "selectedCustomColorRgb": {}
    };
  }
  static get events() {
    return [{
        "method": "colorChange",
        "name": "colorChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emit the selected color"
        },
        "complexType": {
          "original": "StyloPaletteColor",
          "resolved": "StyloPaletteColor",
          "references": {
            "StyloPaletteColor": {
              "location": "import",
              "path": "../../../types/palette"
            }
          }
        }
      }];
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "colorHex",
        "methodName": "onColorHexChange"
      }, {
        "propName": "colorRgb",
        "methodName": "onColorRgbChange"
      }];
  }
}
