import { debounce, hexToRgb, rgbToHex } from '@deckdeckgo/utils';
import { h, Host } from '@stencil/core';
export class Input {
  constructor() {
    this.debounceSelectColor = debounce((inputColor) => this.emitColor(inputColor), 500);
    this.colorHex = undefined;
    this.colorRgb = undefined;
    this.customColorRgb = undefined;
    this.inputAlt = undefined;
    this.color = undefined;
  }
  async componentWillLoad() {
    this.color = this.initColorHex();
  }
  async watchColors() {
    this.color = this.initColorHex();
  }
  initColorHex() {
    if (this.colorHex) {
      return this.colorHex;
    }
    if (this.customColorRgb) {
      return rgbToHex(this.customColorRgb);
    }
    return rgbToHex(this.colorRgb);
  }
  emitColor(inputColor) {
    const hex = `#${inputColor.replace('#', '')}`;
    const rgb = hexToRgb(hex);
    if (!rgb) {
      return;
    }
    this.selectHexColor.emit({
      hex,
      rgb
    });
  }
  render() {
    var _a;
    return (h(Host, null, h("span", null, "#"), h("input", { type: "text", name: "color-picker", "aria-label": this.inputAlt, onInput: ($event) => this.debounceSelectColor($event.target.value), value: (_a = this.color) === null || _a === void 0 ? void 0 : _a.replace('#', '') })));
  }
  static get is() { return "stylo-color-input"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["input.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["input.css"]
    };
  }
  static get properties() {
    return {
      "colorHex": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "color-hex",
        "reflect": false
      },
      "colorRgb": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "color-rgb",
        "reflect": false
      },
      "customColorRgb": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "custom-color-rgb",
        "reflect": false
      },
      "inputAlt": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "input-alt",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "color": {}
    };
  }
  static get events() {
    return [{
        "method": "selectHexColor",
        "name": "selectHexColor",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "StyloPaletteColor",
          "resolved": "StyloPaletteColor",
          "references": {
            "StyloPaletteColor": {
              "location": "import",
              "path": "../../../types/palette"
            }
          }
        }
      }];
  }
  static get watchers() {
    return [{
        "propName": "colorHex",
        "methodName": "watchColors"
      }, {
        "propName": "colorRgb",
        "methodName": "watchColors"
      }, {
        "propName": "customColorRgb",
        "methodName": "watchColors"
      }];
  }
}
//# sourceMappingURL=input.js.map
