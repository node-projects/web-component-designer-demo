import { h } from '@stencil/core';
export class Button {
  constructor() {
    this.disableAction = false;
    this.cssClass = undefined;
    this.label = undefined;
  }
  render() {
    return (h("button", { onMouseDown: ($event) => $event.stopPropagation(), onTouchStart: ($event) => $event.stopPropagation(), onClick: ($event) => {
        $event.stopPropagation();
        this.action.emit($event);
      }, disabled: this.disableAction, class: this.cssClass, "aria-label": this.label }, h("slot", null)));
  }
  static get is() { return "stylo-toolbar-button"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["button.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["button.css"]
    };
  }
  static get properties() {
    return {
      "disableAction": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "disable-action",
        "reflect": false,
        "defaultValue": "false"
      },
      "cssClass": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "css-class",
        "reflect": false
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "label",
        "reflect": false
      }
    };
  }
  static get events() {
    return [{
        "method": "action",
        "name": "action",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "UIEvent",
          "resolved": "UIEvent",
          "references": {
            "UIEvent": {
              "location": "global"
            }
          }
        }
      }];
  }
}
