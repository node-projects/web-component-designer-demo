import { h, Host } from '@stencil/core';
import configStore from '../../../stores/config.store.js';
import containerStore from '../../../stores/container.store.js';
import i18n from '../../../stores/i18n.store.js';
import { renderIcon } from '../../../utils/icon.utils.js';
import { toHTMLElement } from '../../../utils/node.utils.js';
import { findParagraph } from '../../../utils/paragraph.utils.js';
export class Menus {
  constructor() {
    this.onKeyDown = () => {
      this.hide();
    };
    this.top = undefined;
    this.menu = undefined;
  }
  componentDidLoad() {
    this.destroyListener = containerStore.onChange('ref', () => {
      this.removeContainerListener();
      this.addContainerListener();
    });
    this.addContainerListener();
  }
  disconnectedCallback() {
    var _a;
    this.removeContainerListener();
    (_a = this.destroyListener) === null || _a === void 0 ? void 0 : _a.call(this);
  }
  addContainerListener() {
    var _a;
    (_a = containerStore.state.ref) === null || _a === void 0 ? void 0 : _a.addEventListener('keydown', this.onKeyDown, { passive: true });
  }
  removeContainerListener() {
    var _a;
    (_a = containerStore.state.ref) === null || _a === void 0 ? void 0 : _a.removeEventListener('keydown', this.onKeyDown);
  }
  onResize() {
    this.hide();
  }
  onClick({ target }) {
    var _a, _b;
    const paragraph = findParagraph({
      element: target,
      container: containerStore.state.ref
    });
    this.paragraph = toHTMLElement(paragraph);
    if (!this.paragraph) {
      this.hide();
      return;
    }
    this.menuActivated.emit({ paragraph: this.paragraph });
    this.menu = (_a = configStore.state.menus) === null || _a === void 0 ? void 0 : _a.find(({ match }) => match({ paragraph: this.paragraph }));
    this.top = this.menu && ((_b = this.paragraph) === null || _b === void 0 ? void 0 : _b.offsetTop);
  }
  async selectMenuAction({ action }) {
    if (!this.paragraph) {
      this.hide();
      return;
    }
    await action({ paragraph: this.paragraph });
    this.hide();
  }
  hide() {
    this.paragraph = undefined;
    this.menu = undefined;
    this.top = undefined;
  }
  render() {
    const style = this.top === undefined ? { display: 'none' } : { '--menu-top': `${this.top}px` };
    return (h(Host, { style: style }, this.renderMenu(), h("stylo-toolbar-triangle", { style: {
        '--stylo-toolbar-triangle-start': `50%`
      } })));
  }
  renderMenu() {
    var _a;
    return (_a = this.menu) === null || _a === void 0 ? void 0 : _a.actions.map((action) => this.renderAction(action));
  }
  renderAction(action) {
    var _a, _b;
    const { icon: iconSrc, text } = action;
    const icon = renderIcon(iconSrc);
    return (h("stylo-toolbar-button", { onAction: async () => await this.selectMenuAction(action), label: (_b = (_a = i18n.state.menus[text]) !== null && _a !== void 0 ? _a : i18n.state.custom[text]) !== null && _b !== void 0 ? _b : text }, icon ? icon : h("div", { class: "icon", innerHTML: iconSrc })));
  }
  static get is() { return "stylo-menus"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["menus.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["menus.css"]
    };
  }
  static get states() {
    return {
      "top": {},
      "menu": {}
    };
  }
  static get events() {
    return [{
        "method": "menuActivated",
        "name": "menuActivated",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "{paragraph: HTMLElement}",
          "resolved": "{ paragraph: HTMLElement; }",
          "references": {
            "HTMLElement": {
              "location": "global"
            }
          }
        }
      }];
  }
  static get listeners() {
    return [{
        "name": "resize",
        "method": "onResize",
        "target": "window",
        "capture": false,
        "passive": true
      }, {
        "name": "click",
        "method": "onClick",
        "target": "document",
        "capture": false,
        "passive": true
      }];
  }
}
