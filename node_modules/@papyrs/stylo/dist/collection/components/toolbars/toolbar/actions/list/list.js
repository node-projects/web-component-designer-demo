import { h, Host } from '@stencil/core';
import i18n from '../../../../../stores/i18n.store.js';
import { ToolbarList } from '../../../../../types/toolbar.js';
import { IconOl } from '../../../../icons/ol.js';
import { IconUl } from '../../../../icons/ul.js';
export class AlignActions {
  toggleList(e, type) {
    e.stopPropagation();
    this.execCommand.emit({
      cmd: 'list',
      detail: {
        type
      }
    });
  }
  render() {
    return (h(Host, null, h("stylo-toolbar-button", { label: i18n.state.toolbar.list_ol, onAction: ($event) => this.toggleList($event.detail, 'ol'), class: this.list === ToolbarList.ORDERED ? 'active' : undefined }, h(IconOl, null)), h("stylo-toolbar-button", { label: i18n.state.toolbar.list_ul, onAction: ($event) => this.toggleList($event.detail, 'ul'), class: this.list === ToolbarList.UNORDERED ? 'active' : undefined }, h(IconUl, null))));
  }
  static get is() { return "stylo-toolbar-list"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["list.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["list.css"]
    };
  }
  static get properties() {
    return {
      "list": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ToolbarList",
          "resolved": "ToolbarList.ORDERED | ToolbarList.UNORDERED",
          "references": {
            "ToolbarList": {
              "location": "import",
              "path": "../../../../../types/toolbar"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "list",
        "reflect": false
      }
    };
  }
  static get events() {
    return [{
        "method": "execCommand",
        "name": "execCommand",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "ExecCommandAction",
          "resolved": "ExecCommandAction",
          "references": {
            "ExecCommandAction": {
              "location": "import",
              "path": "../../../../../types/execcommand"
            }
          }
        }
      }];
  }
}
