import { h, Host } from '@stencil/core';
import i18n from '../../../../../stores/i18n.store';
import { actionBold, actionItalic, actionStrikeThrough, actionUnderline } from '../../../../../utils/execcomand-text.utils';
export class Text {
  constructor() {
    this.disabledTitle = false;
    this.bold = undefined;
    this.italic = undefined;
    this.underline = undefined;
    this.strikethrough = undefined;
  }
  styleBold($event) {
    $event.stopPropagation();
    this.execCommand.emit(actionBold);
  }
  styleItalic($event) {
    $event.stopPropagation();
    this.execCommand.emit(actionItalic);
  }
  styleUnderline($event) {
    $event.stopPropagation();
    this.execCommand.emit(actionUnderline);
  }
  styleStrikeThrough($event) {
    $event.stopPropagation();
    this.execCommand.emit(actionStrikeThrough);
  }
  render() {
    return (h(Host, null, h("stylo-toolbar-button", { label: i18n.state.toolbar.bold, onAction: ($event) => this.styleBold($event.detail), disableAction: this.disabledTitle, cssClass: this.bold ? 'active' : undefined, class: "bold" }, h("span", null, "B")), h("stylo-toolbar-button", { label: i18n.state.toolbar.italic, onAction: ($event) => this.styleItalic($event.detail), cssClass: this.italic ? 'active' : undefined, class: "italic" }, h("span", null, "I")), h("stylo-toolbar-button", { label: i18n.state.toolbar.underline, onAction: ($event) => this.styleUnderline($event.detail), cssClass: this.underline ? 'active' : undefined, class: this.underline ? 'active underline' : 'underline' }, h("span", null, "U")), h("stylo-toolbar-button", { label: i18n.state.toolbar.strikethrough, onAction: ($event) => this.styleStrikeThrough($event.detail), cssClass: this.strikethrough ? 'active' : undefined, class: "strikethrough" }, h("span", { style: { 'text-decoration': 'line-through' } }, "S"))));
  }
  static get is() { return "stylo-toolbar-text"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["text.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["text.css"]
    };
  }
  static get properties() {
    return {
      "disabledTitle": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "disabled-title",
        "reflect": false,
        "defaultValue": "false"
      },
      "bold": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "bold",
        "reflect": false
      },
      "italic": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "italic",
        "reflect": false
      },
      "underline": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "underline",
        "reflect": false
      },
      "strikethrough": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "strikethrough",
        "reflect": false
      }
    };
  }
  static get events() {
    return [{
        "method": "execCommand",
        "name": "execCommand",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "ExecCommandAction",
          "resolved": "ExecCommandAction",
          "references": {
            "ExecCommandAction": {
              "location": "import",
              "path": "../../../../../types/execcommand"
            }
          }
        }
      }];
  }
}
