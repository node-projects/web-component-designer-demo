import { Component, Event, h, Host, Prop } from '@stencil/core';
import i18n from '../../../../../stores/i18n.store.js';
import { ToolbarFontSize } from '../../../../../types/toolbar.js';
export class FontSize {
  modifyFontSize($event, size) {
    $event.stopPropagation();
    const value = Object.keys(ToolbarFontSize).find((key) => ToolbarFontSize[key] === size);
    this.execCommand.emit({
      cmd: 'style',
      detail: {
        style: 'font-size',
        value: value.toLowerCase().replace('_', '-'),
        initial: (element) => element && element.style['font-size'] === value.toLowerCase().replace('_', '-')
      }
    });
    this.fontSize = size;
  }
  render() {
    return (h(Host, null,
      this.renderAction(ToolbarFontSize.X_SMALL),
      this.renderAction(ToolbarFontSize.SMALL),
      this.renderAction(ToolbarFontSize.MEDIUM),
      this.renderAction(ToolbarFontSize.LARGE),
      this.renderAction(ToolbarFontSize.X_LARGE),
      this.renderAction(ToolbarFontSize.XX_LARGE),
      this.renderAction(ToolbarFontSize.XXX_LARGE)));
  }
  renderAction(size) {
    return (h("stylo-toolbar-button", { label: `${i18n.state.toolbar.font_size} ${size}`, onAction: ($event) => this.modifyFontSize($event.detail, size), class: this.fontSize === size ? 'active' : undefined },
      h("span", null, size.toString())));
  }
  static get is() { return "stylo-toolbar-font-size"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["font-size.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["font-size.css"]
  }; }
  static get properties() { return {
    "fontSize": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "ToolbarFontSize",
        "resolved": "ToolbarFontSize.LARGE | ToolbarFontSize.MEDIUM | ToolbarFontSize.SMALL | ToolbarFontSize.XXX_LARGE | ToolbarFontSize.XX_LARGE | ToolbarFontSize.X_LARGE | ToolbarFontSize.X_SMALL",
        "references": {
          "ToolbarFontSize": {
            "location": "import",
            "path": "../../../../../types/toolbar"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "font-size",
      "reflect": false
    }
  }; }
  static get events() { return [{
      "method": "execCommand",
      "name": "execCommand",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "ExecCommandAction",
        "resolved": "ExecCommandAction",
        "references": {
          "ExecCommandAction": {
            "location": "import",
            "path": "../../../../../types/execcommand"
          }
        }
      }
    }]; }
}
