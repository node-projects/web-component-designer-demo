import { Fragment, h } from '@stencil/core';
import configStore from '../../../../../stores/config.store.js';
import i18n from '../../../../../stores/i18n.store.js';
import { ToolbarActions, ToolbarAlign, ToolbarList } from '../../../../../types/toolbar.js';
import { IconAlignCenter } from '../../../../icons/align-center.js';
import { IconAlignLeft } from '../../../../icons/align-left.js';
import { IconAlignRight } from '../../../../icons/align-right.js';
import { IconColor } from '../../../../icons/color.js';
import { IconLink } from '../../../../icons/link.js';
import { IconOl } from '../../../../icons/ol.js';
import { IconPalette } from '../../../../icons/palette.js';
import { IconUl } from '../../../../icons/ul.js';
export const Style = ({ align, list, switchToolbarActions, disabledTitle, bold, italic, strikethrough, underline, link, onExecCommand, toggleLink }) => {
  const renderSeparator = () => h("stylo-toolbar-separator", null);
  const renderLinkSeparator = () => {
    if (!list && !align) {
      return undefined;
    }
    return renderSeparator();
  };
  const renderListAction = () => {
    if (!configStore.state.toolbar.style.list) {
      return undefined;
    }
    return (h("stylo-toolbar-button", { onAction: () => switchToolbarActions(ToolbarActions.LIST), label: i18n.state.toolbar.style_list }, list === ToolbarList.UNORDERED ? h(IconUl, null) : h(IconOl, null)));
  };
  const renderAlignAction = () => {
    if (!configStore.state.toolbar.style.align) {
      return undefined;
    }
    return (h("stylo-toolbar-button", { onAction: () => switchToolbarActions(ToolbarActions.ALIGNMENT), label: i18n.state.toolbar.style_align }, align === ToolbarAlign.LEFT ? (h(IconAlignLeft, null)) : align === ToolbarAlign.CENTER ? (h(IconAlignCenter, null)) : (h(IconAlignRight, null))));
  };
  const renderFontSizeAction = () => {
    if (!configStore.state.toolbar.style.fontSize) {
      return undefined;
    }
    return (h(Fragment, null,
      h("stylo-toolbar-button", { onAction: () => switchToolbarActions(ToolbarActions.FONT_SIZE), label: i18n.state.toolbar.style_font_size },
        h("span", null,
          "A",
          h("small", null, "A"))),
      renderSeparator()));
  };
  const renderColorActions = () => {
    const result = [
      h("stylo-toolbar-button", { onAction: () => switchToolbarActions(ToolbarActions.COLOR), label: i18n.state.toolbar.style_color },
        h(IconPalette, null))
    ];
    if (configStore.state.toolbar.style.backgroundColor) {
      result.push(h("stylo-toolbar-button", { onAction: () => switchToolbarActions(ToolbarActions.BACKGROUND_COLOR), label: i18n.state.toolbar.style_background },
        h(IconColor, null)));
    }
    return result;
  };
  return (h(Fragment, null,
    h("stylo-toolbar-text", { disabledTitle: disabledTitle, bold: bold === 'bold', italic: italic === 'italic', underline: underline === 'underline', strikethrough: strikethrough === 'strikethrough', onExecCommand: ($event) => onExecCommand($event) }),
    renderSeparator(),
    renderFontSizeAction(),
    renderColorActions(),
    renderSeparator(),
    renderAlignAction(),
    renderListAction(),
    renderLinkSeparator(),
    h("stylo-toolbar-button", { onAction: toggleLink, cssClass: link ? 'active' : undefined, label: i18n.state.toolbar.link },
      h(IconLink, null))));
};
