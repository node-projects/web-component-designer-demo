import { h, Host } from '@stencil/core';
import { ToolbarActions } from '../../../../../types/toolbar.js';
import { createLink } from '../../../../../utils/link.utils.js';
import { toHTMLElement } from '../../../../../utils/node.utils.js';
import { findParagraph } from '../../../../../utils/paragraph.utils.js';
export class Link {
  constructor() {
    this.closeToolbar = () => {
      this.close.emit();
    };
  }
  componentDidLoad() {
    setTimeout(() => { var _a; return (_a = this.input) === null || _a === void 0 ? void 0 : _a.focus(); }, 250);
  }
  connectedCallback() {
    this.addListener();
  }
  disconnectedCallback() {
    this.removeListener();
  }
  addListener() {
    const listenerElement = this.containerRef || document;
    listenerElement === null || listenerElement === void 0 ? void 0 : listenerElement.addEventListener('click', this.closeToolbar, { passive: true });
  }
  removeListener() {
    const listenerElement = this.containerRef || document;
    listenerElement === null || listenerElement === void 0 ? void 0 : listenerElement.removeEventListener('click', this.closeToolbar);
  }
  handleLinkInput($event) {
    this.linkUrl = $event.target.value;
  }
  createLink() {
    if (!this.anchorLink) {
      return;
    }
    const { range } = this.anchorLink;
    if (!range) {
      return;
    }
    if (!this.linkUrl || this.linkUrl.length <= 0) {
      return;
    }
    createLink({ range, linkUrl: this.linkUrl });
    const container = findParagraph({
      element: range.commonAncestorContainer,
      container: this.containerRef
    });
    if (!container) {
      return;
    }
    this.linkCreated.emit(toHTMLElement(container));
  }
  handleLinkEnter($event) {
    if (!$event) {
      return;
    }
    if (this.toolbarActions === ToolbarActions.STYLE &&
      ($event.key.toLowerCase() === 'backspace' || $event.key.toLowerCase() === 'delete')) {
      this.linkModified.emit(false);
    }
    else if (this.toolbarActions === ToolbarActions.LINK &&
      $event.key.toLowerCase() === 'enter') {
      this.createLink();
      this.linkModified.emit(true);
    }
  }
  render() {
    return (h(Host, null, h("input", { ref: (el) => (this.input = el), placeholder: "Add a link...", onInput: ($event) => this.handleLinkInput($event), onKeyUp: ($event) => this.handleLinkEnter($event) })));
  }
  static get is() { return "stylo-toolbar-link"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["link.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["link.css"]
    };
  }
  static get properties() {
    return {
      "containerRef": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "HTMLElement | undefined",
          "resolved": "HTMLElement",
          "references": {
            "HTMLElement": {
              "location": "global"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        }
      },
      "toolbarActions": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "ToolbarActions",
          "resolved": "ToolbarActions.ALIGNMENT | ToolbarActions.BACKGROUND_COLOR | ToolbarActions.COLOR | ToolbarActions.FONT_SIZE | ToolbarActions.LINK | ToolbarActions.LIST | ToolbarActions.STYLE",
          "references": {
            "ToolbarActions": {
              "location": "import",
              "path": "../../../../../types/toolbar"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "toolbar-actions",
        "reflect": false
      },
      "anchorLink": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "ToolbarAnchorLink",
          "resolved": "ToolbarAnchorLink",
          "references": {
            "ToolbarAnchorLink": {
              "location": "import",
              "path": "../../../../../types/toolbar"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        }
      },
      "linkCreated": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "EventEmitter<HTMLElement>",
          "resolved": "EventEmitter<HTMLElement>",
          "references": {
            "EventEmitter": {
              "location": "import",
              "path": "@stencil/core"
            },
            "HTMLElement": {
              "location": "global"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        }
      }
    };
  }
  static get events() {
    return [{
        "method": "linkModified",
        "name": "linkModified",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }, {
        "method": "close",
        "name": "close",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
}
