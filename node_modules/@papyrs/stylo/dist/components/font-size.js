import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { i as i18n } from './i18n.store.js';
import { c as ToolbarFontSize } from './toolbar.js';
import { d as defineCustomElement$1 } from './button.js';

const fontSizeCss = ":host{--light:#f4f5f8;--light-contrast:#000000;--medium:#6e6d6f;--medium-contrast:#000000;--black:#000000;--black-contrast:#ffffff;--white:#ffffff;--white-contrast:#000000;--highlight:#3880ff;--highlight-rgb:56, 128, 255;--highlight-contrast:#ffffff;display:flex}stylo-toolbar-button.active{--stylo-toolbar-button-color:var(--stylo-toolbar-button-color-active, var(--highlight))}stylo-toolbar-button:first-of-type{--stylo-toolbar-button-font-size:0.8rem}stylo-toolbar-button:nth-of-type(2){--stylo-toolbar-button-font-size:1rem}stylo-toolbar-button:nth-of-type(3){--stylo-toolbar-button-font-size:1.2rem}stylo-toolbar-button:nth-of-type(5){--stylo-toolbar-button-font-size:1.6rem}stylo-toolbar-button:nth-of-type(6){--stylo-toolbar-button-font-size:1.8rem}stylo-toolbar-button:nth-of-type(7){--stylo-toolbar-button-font-size:2rem}";

const FontSize = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.execCommand = createEvent(this, "execCommand", 7);
    this.fontSize = undefined;
  }
  modifyFontSize($event, size) {
    $event.stopPropagation();
    const value = Object.keys(ToolbarFontSize).find((key) => ToolbarFontSize[key] === size);
    this.execCommand.emit({
      cmd: 'style',
      detail: {
        style: 'font-size',
        value: value.toLowerCase().replace('_', '-'),
        initial: (element) => element && element.style['font-size'] === value.toLowerCase().replace('_', '-')
      }
    });
    this.fontSize = size;
  }
  render() {
    return (h(Host, null, this.renderAction(ToolbarFontSize.X_SMALL), this.renderAction(ToolbarFontSize.SMALL), this.renderAction(ToolbarFontSize.MEDIUM), this.renderAction(ToolbarFontSize.LARGE), this.renderAction(ToolbarFontSize.X_LARGE), this.renderAction(ToolbarFontSize.XX_LARGE), this.renderAction(ToolbarFontSize.XXX_LARGE)));
  }
  renderAction(size) {
    return (h("stylo-toolbar-button", { label: `${i18n.state.toolbar.font_size} ${size}`, onAction: ($event) => this.modifyFontSize($event.detail, size), class: this.fontSize === size ? 'active' : undefined }, h("span", null, size.toString())));
  }
  static get style() { return fontSizeCss; }
}, [1, "stylo-toolbar-font-size", {
    "fontSize": [1025, "font-size"]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["stylo-toolbar-font-size", "stylo-toolbar-button"];
  components.forEach(tagName => { switch (tagName) {
    case "stylo-toolbar-font-size":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, FontSize);
      }
      break;
    case "stylo-toolbar-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}
defineCustomElement();

export { FontSize as F, defineCustomElement as d };
