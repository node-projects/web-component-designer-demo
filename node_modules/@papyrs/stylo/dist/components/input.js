import { HTMLElement, createEvent, h, Host, proxyCustomElement } from '@stencil/core/internal/client';
import { d as d$1 } from './chunk-MPAE6ITZ.js';

function u(n){if(!n||n===void 0||n==="")return;let e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(n);return e?`${parseInt(e[1],16)}, ${parseInt(e[2],16)}, ${parseInt(e[3],16)}`:void 0}function i(n){return n?(r=>{if(!!r)return `#${r.map(t=>t.toString(16).padStart(2,"0")).join("")}`})(d(n)):void 0}function d(n){let e=n.match(/([.\d]+),\s*([.\d]+),\s*([.\d]+)/);if(!!e)return e.splice(1,3).map(r=>Number(r))}

const inputCss = ":host{display:flex;position:relative;margin:var(--stylo-color-input-margin, 4px);border-radius:var(--stylo-color-input-container-border-radius);border:var(--stylo-color-input-container-border)}span{width:var(--stylo-color-hash-width, 28px);height:var(--stylo-color-hash-height, 28px);display:inline-flex;justify-content:center;align-items:center;background:var(--stylo-color-hash-background, #f0f0f0 none repeat scroll 0 0);color:var(--stylo-color-hash-color, #98a1a4);border-radius:var(--stylo-color-hash-border-radius, 4px 0 0 4px)}input{color:var(--stylo-color-input-color, #666666);background:var(--stylo-color-input-background, inherit);border:none;outline:none;height:var(--stylo-color-input-height, 28px);box-shadow:var(--stylo-color-input-box-shadow, #f0f0f0 0 0 0 1px inset);border-radius:var(--stylo-color-input-border-radius, 0 4px 4px 0);padding:var(--stylo-color-input-padding, 0 4px);max-width:var(--stylo-color-input-max-width, 136px);font-family:var(--stylo-color-input-font-family, inherit)}";

let Input = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.selectHexColor = createEvent(this, "selectHexColor", 7);
    this.debounceSelectColor = d$1((inputColor) => this.emitColor(inputColor), 500);
  }
  async componentWillLoad() {
    this.color = this.initColorHex();
  }
  async watchColors() {
    this.color = this.initColorHex();
  }
  initColorHex() {
    if (this.colorHex) {
      return this.colorHex;
    }
    if (this.customColorRgb) {
      return i(this.customColorRgb);
    }
    return i(this.colorRgb);
  }
  emitColor(inputColor) {
    const hex = `#${inputColor.replace('#', '')}`;
    const rgb = u(hex);
    if (!rgb) {
      return;
    }
    this.selectHexColor.emit({
      hex,
      rgb
    });
  }
  render() {
    var _a;
    return (h(Host, null, h("span", null, "#"), h("input", { type: "text", name: "color-picker", "aria-label": this.inputAlt, onInput: ($event) => this.debounceSelectColor($event.target.value), value: (_a = this.color) === null || _a === void 0 ? void 0 : _a.replace('#', '') })));
  }
  static get watchers() { return {
    "colorHex": ["watchColors"],
    "colorRgb": ["watchColors"],
    "customColorRgb": ["watchColors"]
  }; }
  static get style() { return inputCss; }
};
Input = /*@__PURE__*/ proxyCustomElement(Input, [1, "stylo-color-input", {
    "colorHex": [1, "color-hex"],
    "colorRgb": [1, "color-rgb"],
    "customColorRgb": [1, "custom-color-rgb"],
    "inputAlt": [1, "input-alt"],
    "color": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["stylo-color-input"];
  components.forEach(tagName => { switch (tagName) {
    case "stylo-color-input":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, Input);
      }
      break;
  } });
}
defineCustomElement();

export { Input as I, defineCustomElement as d, u };
