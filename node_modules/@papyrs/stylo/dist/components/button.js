import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';

const buttonCss = ".host{--light:#f4f5f8;--light-contrast:#000000;--medium:#6e6d6f;--medium-contrast:#000000;--black:#000000;--black-contrast:#ffffff;--white:#ffffff;--white-contrast:#000000;--highlight:#3880ff;--highlight-rgb:56, 128, 255;--highlight-contrast:#ffffff}button{pointer-events:initial;cursor:pointer;margin:0;padding:4px 6px 6px;height:40px;z-index:var(--stylo-toolbar-button-zindex, 2);display:flex;justify-content:center;align-items:center;border:0;color:var(--stylo-toolbar-button-color, black);transition:0.1s background-color, 0.1s border-color, 0.1s fill;background:transparent;font-size:var(--stylo-toolbar-button-font-size, 1.4rem);font-family:var(--stylo-toolbar-button-font-family, inherit);-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;outline:0}button.active{color:var(--stylo-toolbar-button-color-active, var(--highlight))}button[disabled]{color:var(--stylo-toolbar-button-color-disabled, var(--light));display:var(--stylo-toolbar-button-display-disabled, none)}button.active>div{background-color:var(--stylo-toolbar-button-color-active, var(--highlight))}button[disabled]>div{background-color:var(--stylo-toolbar-button-color-disabled, var(--light))}::slotted(*){pointer-events:none}::slotted(svg){width:20px;height:20px;padding-bottom:2px}";

const Button = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.action = createEvent(this, "action", 7);
    this.disableAction = false;
    this.cssClass = undefined;
    this.label = undefined;
  }
  render() {
    return (h("button", { onMouseDown: ($event) => $event.stopPropagation(), onTouchStart: ($event) => $event.stopPropagation(), onClick: ($event) => {
        $event.stopPropagation();
        this.action.emit($event);
      }, disabled: this.disableAction, class: this.cssClass, "aria-label": this.label }, h("slot", null)));
  }
  static get style() { return buttonCss; }
}, [1, "stylo-toolbar-button", {
    "disableAction": [4, "disable-action"],
    "cssClass": [1, "css-class"],
    "label": [1]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["stylo-toolbar-button"];
  components.forEach(tagName => { switch (tagName) {
    case "stylo-toolbar-button":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, Button);
      }
      break;
  } });
}
defineCustomElement();

export { Button as B, defineCustomElement as d };
