import { h, proxyCustomElement, HTMLElement, createEvent, Host } from '@stencil/core/internal/client';
import { e as configStore } from './config.store.js';
import { i as i18n } from './i18n.store.js';
import { c as ToolbarFontSize, b as ToolbarAlign } from './toolbar.js';
import { d as toHTMLElement, f as findParagraph } from './paragraph.utils.js';
import { d as defineCustomElement$1 } from './button.js';

const execCommandNative = (action) => {
  if (action.cmd === 'style') {
    execCommandNativeStyle(action);
  }
  else if (action.cmd === 'list') {
    execCommandNativeList(action);
  }
};
const execCommandNativeStyle = (action) => {
  const detail = action.detail;
  // @ts-ignore
  document.execCommand('styleWithCSS', false, true);
  switch (detail.style) {
    case 'color':
      document.execCommand('foreColor', false, detail.value);
      break;
    case 'background-color':
      document.execCommand('backColor', false, detail.value);
      break;
    case 'font-size':
      document.execCommand('fontSize', false, ToolbarFontSize[detail.value.replace('-', '_').toUpperCase()]);
      break;
    case 'font-weight':
      document.execCommand('bold', false, null);
      break;
    case 'font-style':
      document.execCommand('italic', false, null);
      break;
    case 'text-decoration':
      document.execCommand(detail.value === 'line-through' ? 'strikeThrough' : 'underline', false, null);
      break;
  }
};
const execCommandNativeList = (action) => {
  const detail = action.detail;
  switch (detail.type) {
    case 'ol':
      document.execCommand('insertOrderedList', false, null);
      break;
    case 'ul':
      document.execCommand('insertUnorderedList', false, null);
      break;
  }
};
const execCommandNativeAlign = (align) => {
  switch (align) {
    case ToolbarAlign.CENTER:
      document.execCommand('justifyCenter', false, null);
      break;
    case ToolbarAlign.RIGHT:
      document.execCommand('justifyRight', false, null);
      break;
    default:
      document.execCommand('justifyLeft', false, null);
  }
};

const IconAlignCenter = () => (h("svg", { width: "100%", height: "100%", viewBox: "0 0 512 512", style: {
    fillRule: 'evenodd',
    clipRule: 'evenodd',
    strokeLinecap: 'round',
    strokeLinejoin: 'round'
  } },
  h("path", { d: "M176,331l160,0", style: { fill: 'none', fillRule: 'nonzero', stroke: 'currentColor', strokeWidth: '25.3px' } }),
  h("path", { d: "M176,185l160,0", style: { fill: 'none', fillRule: 'nonzero', stroke: 'currentColor', strokeWidth: '25.3px' } }),
  h("path", { d: "M96,258l320,0", style: { fill: 'none', fillRule: 'nonzero', stroke: 'currentColor', strokeWidth: '32px' } }),
  h("path", { d: "M96,112l320,0", style: { fill: 'none', fillRule: 'nonzero', stroke: 'currentColor', strokeWidth: '32px' } }),
  h("path", { d: "M96,400l320,0", style: { fill: 'none', fillRule: 'nonzero', stroke: 'currentColor', strokeWidth: '32px' } })));

const IconAlignLeft = () => (h("svg", { width: "100%", height: "100%", viewBox: "0 0 512 512", style: {
    fillRule: 'evenodd',
    clipRule: 'evenodd',
    strokeLinecap: 'round',
    strokeLinejoin: 'round'
  } },
  h("path", { d: "M96,331l160,0", style: { fill: 'none', fillRule: 'nonzero', stroke: 'currentColor', strokeWidth: '25.3px' } }),
  h("path", { d: "M96,185l160,0", style: { fill: 'none', fillRule: 'nonzero', stroke: 'currentColor', strokeWidth: '25.3px' } }),
  h("path", { d: "M96,258l320,0", style: { fill: 'none', fillRule: 'nonzero', stroke: 'currentColor', strokeWidth: '32px' } }),
  h("path", { d: "M96,112l320,0", style: { fill: 'none', fillRule: 'nonzero', stroke: 'currentColor', strokeWidth: '32px' } }),
  h("path", { d: "M96,400l320,0", style: { fill: 'none', fillRule: 'nonzero', stroke: 'currentColor', strokeWidth: '32px' } })));

const IconAlignRight = () => (h("svg", { width: "100%", height: "100%", viewBox: "0 0 512 512", style: {
    fillRule: 'evenodd',
    clipRule: 'evenodd',
    strokeLinecap: 'round',
    strokeLinejoin: 'round'
  } },
  h("path", { d: "M256,331l160,0", style: { fill: 'none', fillRule: 'nonzero', stroke: 'currentColor', strokeWidth: '25.3px' } }),
  h("path", { d: "M256,185l160,0", style: { fill: 'none', fillRule: 'nonzero', stroke: 'currentColor', strokeWidth: '25.3px' } }),
  h("path", { d: "M96,258l320,0", style: { fill: 'none', fillRule: 'nonzero', stroke: 'currentColor', strokeWidth: '32px' } }),
  h("path", { d: "M96,112l320,0", style: { fill: 'none', fillRule: 'nonzero', stroke: 'currentColor', strokeWidth: '32px' } }),
  h("path", { d: "M96,400l320,0", style: { fill: 'none', fillRule: 'nonzero', stroke: 'currentColor', strokeWidth: '32px' } })));

const execCommandAlign = (anchorEvent, container, align) => {
  const anchorElement = toHTMLElement(anchorEvent.target);
  const paragraph = toHTMLElement(findParagraph({ element: anchorElement, container }));
  if (!paragraph) {
    return;
  }
  paragraph.style.textAlign = (paragraph === null || paragraph === void 0 ? void 0 : paragraph.style.textAlign) === align ? '' : align;
};

const alignCss = ":host{display:flex;--light:#f4f5f8;--light-contrast:#000000;--medium:#6e6d6f;--medium-contrast:#000000;--black:#000000;--black-contrast:#ffffff;--white:#ffffff;--white-contrast:#000000;--highlight:#3880ff;--highlight-rgb:56, 128, 255;--highlight-contrast:#ffffff}stylo-toolbar-button.active{--stylo-toolbar-button-color:var(--stylo-toolbar-button-color-active, var(--highlight))}";

const Align = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.alignModified = createEvent(this, "alignModified", 7);
    this.anchorEvent = undefined;
    this.align = undefined;
    this.containerRef = undefined;
  }
  justifyContent($event, align) {
    $event.stopPropagation();
    if (configStore.state.toolbar.command === 'native') {
      execCommandNativeAlign(align);
    }
    else {
      execCommandAlign(this.anchorEvent, this.containerRef, align);
    }
    this.alignModified.emit();
  }
  render() {
    return (h(Host, null, h("stylo-toolbar-button", { label: i18n.state.toolbar.align_left, onAction: ($event) => this.justifyContent($event.detail, ToolbarAlign.LEFT), class: this.align === ToolbarAlign.LEFT ? 'active' : undefined }, h(IconAlignLeft, null)), h("stylo-toolbar-button", { label: i18n.state.toolbar.align_center, onAction: ($event) => this.justifyContent($event.detail, ToolbarAlign.CENTER), class: this.align === ToolbarAlign.CENTER ? 'active' : undefined }, h(IconAlignCenter, null)), h("stylo-toolbar-button", { label: i18n.state.toolbar.align_right, onAction: ($event) => this.justifyContent($event.detail, ToolbarAlign.RIGHT), class: this.align === ToolbarAlign.RIGHT ? 'active' : undefined }, h(IconAlignRight, null))));
  }
  static get style() { return alignCss; }
}, [1, "stylo-toolbar-align", {
    "anchorEvent": [16],
    "align": [1],
    "containerRef": [16]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["stylo-toolbar-align", "stylo-toolbar-button"];
  components.forEach(tagName => { switch (tagName) {
    case "stylo-toolbar-align":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, Align);
      }
      break;
    case "stylo-toolbar-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}
defineCustomElement();

export { Align as A, IconAlignLeft as I, IconAlignCenter as a, IconAlignRight as b, defineCustomElement as d, execCommandNative as e };
