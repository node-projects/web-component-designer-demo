import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { T as ToolbarActions } from './toolbar.js';
import { w } from './chunk-MPAE6ITZ.js';
import { d as toHTMLElement, f as findParagraph } from './paragraph.utils.js';
import { g as getRange } from './selection.utils.js';

const createLink = ({ range, linkUrl }) => {
  const fragment = range.extractContents();
  const a = createLinkElementForFragment({ fragment, linkUrl });
  range.insertNode(a);
};
const removeLink = (container) => {
  const { range, selection } = getRange(container);
  if (!range) {
    return;
  }
  if (w()) {
    removeFirefoxLink(selection);
    return;
  }
  const anchor = toHTMLElement(selection.anchorNode);
  const fragment = range.extractContents();
  anchor.parentElement.replaceChild(fragment, anchor);
};
const removeFirefoxLink = (selection) => {
  const container = toHTMLElement(selection.anchorNode);
  if (!container || container.nodeName.toLowerCase() !== 'a') {
    return;
  }
  container.parentElement.insertBefore(document.createTextNode(container.textContent), container);
  container.parentElement.removeChild(container);
};
const createLinkElementForFragment = ({ fragment, linkUrl }) => {
  const a = createLinkElement({ linkUrl });
  a.appendChild(fragment);
  return a;
};
const createLinkElement = ({ linkUrl }) => {
  const a = document.createElement('a');
  a.href = linkUrl;
  a.rel = 'noopener noreferrer';
  a.target = '_blank';
  return a;
};

const linkCss = ":host{width:100%;height:100%;z-index:var(--stylo-toolbar-link-zindex, 2)}:host input{pointer-events:visible;background:transparent;width:97%;height:100%;color:var(--stylo-toolbar-link-color, black);border:none;outline:0;font-size:16px}:host input::-moz-placeholder{color:var(--stylo-toolbar-link-placeholder-color, black)}:host input::placeholder{color:var(--stylo-toolbar-link-placeholder-color, black)}";

const Link = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.linkModified = createEvent(this, "linkModified", 7);
    this.close = createEvent(this, "close", 7);
    this.closeToolbar = () => {
      this.close.emit();
    };
  }
  componentDidLoad() {
    setTimeout(() => { var _a; return (_a = this.input) === null || _a === void 0 ? void 0 : _a.focus(); }, 250);
  }
  connectedCallback() {
    this.addListener();
  }
  disconnectedCallback() {
    this.removeListener();
  }
  addListener() {
    const listenerElement = this.containerRef || document;
    listenerElement === null || listenerElement === void 0 ? void 0 : listenerElement.addEventListener('click', this.closeToolbar, { passive: true });
  }
  removeListener() {
    const listenerElement = this.containerRef || document;
    listenerElement === null || listenerElement === void 0 ? void 0 : listenerElement.removeEventListener('click', this.closeToolbar);
  }
  handleLinkInput($event) {
    this.linkUrl = $event.target.value;
  }
  createLink() {
    if (!this.anchorLink) {
      return;
    }
    const { range } = this.anchorLink;
    if (!range) {
      return;
    }
    if (!this.linkUrl || this.linkUrl.length <= 0) {
      return;
    }
    createLink({ range, linkUrl: this.linkUrl });
    const container = findParagraph({
      element: range.commonAncestorContainer,
      container: this.containerRef
    });
    if (!container) {
      return;
    }
    this.linkCreated.emit(toHTMLElement(container));
  }
  handleLinkEnter($event) {
    if (!$event) {
      return;
    }
    if (this.toolbarActions === ToolbarActions.STYLE &&
      ($event.key.toLowerCase() === 'backspace' || $event.key.toLowerCase() === 'delete')) {
      this.linkModified.emit(false);
    }
    else if (this.toolbarActions === ToolbarActions.LINK &&
      $event.key.toLowerCase() === 'enter') {
      this.createLink();
      this.linkModified.emit(true);
    }
  }
  render() {
    return (h(Host, null, h("input", { ref: (el) => (this.input = el), placeholder: "Add a link...", onInput: ($event) => this.handleLinkInput($event), onKeyUp: ($event) => this.handleLinkEnter($event) })));
  }
  static get style() { return linkCss; }
}, [1, "stylo-toolbar-link", {
    "containerRef": [16],
    "toolbarActions": [2, "toolbar-actions"],
    "anchorLink": [16],
    "linkCreated": [16]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["stylo-toolbar-link"];
  components.forEach(tagName => { switch (tagName) {
    case "stylo-toolbar-link":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, Link);
      }
      break;
  } });
}
defineCustomElement();

export { Link as L, createLinkElement as c, defineCustomElement as d, removeLink as r };
