import { t as transformParagraph, c as createEmptyElement } from './paragraph.utils.js';

const blockquote = {
  text: 'blockquote',
  icon: 'blockquote',
  createParagraphs: async ({ container, paragraph }) => transformParagraph({
    elements: [createEmptyElement({ nodeName: 'blockquote' })],
    paragraph,
    container
  })
};

const code = {
  text: 'code',
  icon: 'code',
  createParagraphs: async ({ container, paragraph }) => {
    transformParagraph({
      elements: [createEmptyElement({ nodeName: 'code' }), createEmptyElement({ nodeName: 'div' })],
      paragraph,
      container
    });
  }
};

const h1 = {
  text: 'huge_title',
  icon: `<span class='placeholder'>H1</span>`,
  createParagraphs: async ({ container, paragraph }) => transformParagraph({
    elements: [createEmptyElement({ nodeName: 'h1' })],
    paragraph,
    container
  })
};

const h2 = {
  text: 'large_title',
  icon: `<span class='placeholder'>H2</span>`,
  createParagraphs: async ({ container, paragraph }) => transformParagraph({
    elements: [createEmptyElement({ nodeName: 'h2' })],
    paragraph,
    container
  })
};

const h3 = {
  text: 'small_title',
  icon: `<span class='placeholder'>H3</span>`,
  createParagraphs: async ({ container, paragraph }) => transformParagraph({
    elements: [createEmptyElement({ nodeName: 'h3' })],
    paragraph,
    container
  })
};

const hr = {
  text: 'separator',
  icon: 'hr',
  createParagraphs: async ({ container, paragraph }) => {
    const hr = document.createElement('hr');
    transformParagraph({
      elements: [hr, createEmptyElement({ nodeName: 'div' })],
      paragraph,
      container,
      focus: 'last'
    });
  }
};

const img = {
  text: 'image',
  icon: 'img',
  files: {
    accept: 'image/x-png,image/jpeg,image/gif,image/svg+xml,image/webp',
    multiple: false
  },
  createParagraphs: async ({ container, paragraph, files }) => {
    const URL = window.URL || window.webkitURL;
    const imgUrl = URL.createObjectURL(files[0]);
    const img = document.createElement('img');
    img.src = imgUrl;
    img.setAttribute('loading', 'lazy');
    const emptyDiv = createEmptyElement({ nodeName: 'div' });
    transformParagraph({
      elements: [img, emptyDiv],
      paragraph,
      container,
      focus: 'last'
    });
  }
};

const createListItem = () => {
  const item = document.createElement('li');
  item.innerHTML = '\u200B';
  return item;
};
const ul = {
  text: 'unordered_list',
  icon: 'ul',
  createParagraphs: async ({ container, paragraph }) => {
    const ul = document.createElement('ul');
    ul.append(createListItem());
    await transformParagraph({
      elements: [ul, createEmptyElement({ nodeName: 'div' })],
      paragraph,
      container
    });
  }
};
const ol = {
  text: 'ordered_list',
  icon: 'ol',
  createParagraphs: async ({ container, paragraph }) => {
    const ol = document.createElement('ol');
    ol.append(createListItem());
    await transformParagraph({
      elements: [ol, createEmptyElement({ nodeName: 'div' })],
      paragraph,
      container
    });
  }
};

export { h2 as a, blockquote as b, code as c, h3 as d, hr as e, h1 as h, img as i, ol as o, ul as u };

//# sourceMappingURL=list.plugin.js.map