import { proxyCustomElement, HTMLElement, createEvent, h, Fragment } from '@stencil/core/internal/client';
import { f as configStore } from './config.store.js';
import { i as i18n } from './i18n.store.js';
import { r as renderIcon } from './icon.utils.js';
import { d as toHTMLElement } from './paragraph.utils.js';

const listCss = ":host{display:flex;flex-direction:column;--light:#f4f5f8;--light-contrast:#000000;--medium:#6e6d6f;--medium-contrast:#000000;--black:#000000;--black-contrast:#ffffff;--white:#ffffff;--white-contrast:#000000;--highlight:#3880ff;--highlight-rgb:56, 128, 255;--highlight-contrast:#ffffff;--background-active:var(--stylo-list-background-active, var(--light));--border-active:var(--stylo-list-border-active, 1px solid var(--background-active));--color-active:var(--stylo-list-color-active, var(--light-contrast))}button{display:flex;position:relative;isolation:isolate;overflow:hidden;background:transparent;border:none;outline:none;cursor:pointer;transition:color 0.25s ease-out, background 0.25s ease-out, transform 0.15s ease-out;justify-content:flex-start;align-items:center;font-size:1rem;color:var(--stylo-toolbar-button-color, black);white-space:pre}button:active{box-shadow:none;transform:translateX(1px) translateY(1px)}button:hover,button:focus{background:var(--background-active);color:var(--color-active)}svg,span.placeholder{width:1.4rem;height:1.4rem;border:var(--border-active);border-radius:var(--stylo-border, 4px);margin:4px 12px 4px 8px;background:var(--white)}svg{padding:8px}span.placeholder{padding:10px 8px 6px;font-size:0.8rem;font-weight:700}span.placeholder::first-letter{font-size:125%}div.icon{display:flex}.empty{padding:10px 16px 6px}.empty strong{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;display:block}";

const List = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.applyPlugin = createEvent(this, "applyPlugin", 7);
    this.cancelPlugins = createEvent(this, "cancelPlugins", 7);
    this.filter = '';
    this.onKeyDown = ($event) => {
      const { code } = $event;
      if (['Enter'].includes(code)) {
        return;
      }
      $event.preventDefault();
      if (['Escape'].includes(code)) {
        this.cancelPlugins.emit();
        return;
      }
      if (['ArrowDown'].includes(code)) {
        this.focusNext();
        return;
      }
      if (['ArrowUp'].includes(code)) {
        this.focusPrevious();
        return;
      }
      this.filterPlugins($event);
    };
    this.display = false;
    this.plugins = undefined;
  }
  componentWillLoad() {
    this.plugins = [...configStore.state.plugins];
  }
  componentDidUpdate() {
    this.focusOnUpdate();
  }
  focusOnUpdate() {
    // If only one plugin button is displayed, focus it
    const buttons = this.el.shadowRoot.querySelectorAll('button');
    if (buttons.length === 1) {
      buttons[0].focus();
    }
  }
  emitPlugin($event, plugin) {
    $event.stopPropagation();
    this.applyPlugin.emit(plugin);
  }
  onDisplay() {
    if (this.display) {
      document.addEventListener('keydown', this.onKeyDown);
      return;
    }
    document.removeEventListener('keydown', this.onKeyDown, false);
    this.reset();
  }
  reset() {
    this.filter = '';
    this.plugins = [...configStore.state.plugins];
  }
  async focusFirstButton() {
    var _a;
    this.focusButton = this.el.shadowRoot.querySelector('button');
    (_a = this.focusButton) === null || _a === void 0 ? void 0 : _a.focus();
  }
  focusNext() {
    var _a, _b;
    this.focusButton = toHTMLElement((_a = (this.focusButton || this.el.shadowRoot.firstElementChild)) === null || _a === void 0 ? void 0 : _a.nextElementSibling);
    (_b = this.focusButton) === null || _b === void 0 ? void 0 : _b.focus();
  }
  focusPrevious() {
    var _a, _b;
    this.focusButton = toHTMLElement((_a = (this.focusButton || this.el.shadowRoot.lastElementChild)) === null || _a === void 0 ? void 0 : _a.previousElementSibling);
    (_b = this.focusButton) === null || _b === void 0 ? void 0 : _b.focus();
  }
  filterPlugins($event) {
    const { code, metaKey, ctrlKey, key } = $event;
    if (metaKey || ctrlKey) {
      return;
    }
    // For example Space or ArrowUp
    if (key.length > 1 && !['Backspace'].includes(code)) {
      return;
    }
    this.filter =
      code === 'Backspace'
        ? this.filter.length > 0
          ? this.filter.slice(0, -1)
          : this.filter
        : `${this.filter}${key}`;
    this.plugins = [...configStore.state.plugins].filter(({ text }) => {
      var _a, _b;
      const label = (_b = (_a = i18n.state.plugins[text]) !== null && _a !== void 0 ? _a : i18n.state.custom[text]) !== null && _b !== void 0 ? _b : text;
      return label.toLowerCase().indexOf(this.filter.toLowerCase()) > -1;
    });
  }
  render() {
    return (h(Fragment, null, this.plugins.map((plugin, i) => this.renderPlugin(plugin, `plugin-${i}`)), this.renderEmpty()));
  }
  renderEmpty() {
    if (this.plugins.length > 0) {
      return undefined;
    }
    return (h("span", { class: "empty" }, i18n.state.plugins.no_matches, ": ", h("strong", null, this.filter)));
  }
  renderPlugin(plugin, key) {
    const { text, icon: iconSrc } = plugin;
    const icon = renderIcon(iconSrc);
    return (h("button", { key: key, onClick: ($event) => this.emitPlugin($event, plugin) }, icon === undefined && (h("div", Object.assign({ class: "icon" }, (icon === undefined && { innerHTML: iconSrc })))), icon, this.renderText(text)));
  }
  renderText(text) {
    var _a, _b, _c, _d, _e;
    const textValue = (_b = (_a = i18n.state.plugins[text]) !== null && _a !== void 0 ? _a : i18n.state.custom[text]) !== null && _b !== void 0 ? _b : text;
    if (this.filter.length > 0) {
      const rgxSplit = new RegExp(this.filter + '(.*)', 'gi');
      const split = textValue.split(rgxSplit);
      const rgxFilter = new RegExp(this.filter, 'gi');
      const filter = textValue.match(rgxFilter);
      return (h(Fragment, null, (_c = split[0]) !== null && _c !== void 0 ? _c : '', h("strong", null, (_d = filter[0]) !== null && _d !== void 0 ? _d : ''), (_e = split[1]) !== null && _e !== void 0 ? _e : ''));
    }
    return textValue;
  }
  get el() { return this; }
  static get watchers() { return {
    "display": ["onDisplay"]
  }; }
  static get style() { return listCss; }
}, [1, "stylo-list", {
    "display": [4],
    "plugins": [32],
    "focusFirstButton": [64]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["stylo-list"];
  components.forEach(tagName => { switch (tagName) {
    case "stylo-list":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, List);
      }
      break;
  } });
}
defineCustomElement();

export { List as L, defineCustomElement as d };
