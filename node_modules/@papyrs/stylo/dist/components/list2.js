import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { i as i18n } from './i18n.store.js';
import { a as ToolbarList } from './toolbar.js';
import { a as IconOl, I as IconUl } from './ul.js';
import { d as defineCustomElement$1 } from './button.js';

const listCss = ":host{display:flex;--light:#f4f5f8;--light-contrast:#000000;--medium:#6e6d6f;--medium-contrast:#000000;--black:#000000;--black-contrast:#ffffff;--white:#ffffff;--white-contrast:#000000;--highlight:#3880ff;--highlight-rgb:56, 128, 255;--highlight-contrast:#ffffff}stylo-toolbar-button.active{--stylo-toolbar-button-color:var(--stylo-toolbar-button-color-active, var(--highlight))}";

const AlignActions = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.execCommand = createEvent(this, "execCommand", 7);
  }
  toggleList(e, type) {
    e.stopPropagation();
    this.execCommand.emit({
      cmd: 'list',
      detail: {
        type
      }
    });
  }
  render() {
    return (h(Host, null, h("stylo-toolbar-button", { label: i18n.state.toolbar.list_ol, onAction: ($event) => this.toggleList($event.detail, 'ol'), class: this.list === ToolbarList.ORDERED ? 'active' : undefined }, h(IconOl, null)), h("stylo-toolbar-button", { label: i18n.state.toolbar.list_ul, onAction: ($event) => this.toggleList($event.detail, 'ul'), class: this.list === ToolbarList.UNORDERED ? 'active' : undefined }, h(IconUl, null))));
  }
  static get style() { return listCss; }
}, [1, "stylo-toolbar-list", {
    "list": [1]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["stylo-toolbar-list", "stylo-toolbar-button"];
  components.forEach(tagName => { switch (tagName) {
    case "stylo-toolbar-list":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, AlignActions);
      }
      break;
    case "stylo-toolbar-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}
defineCustomElement();

export { AlignActions as A, defineCustomElement as d };
