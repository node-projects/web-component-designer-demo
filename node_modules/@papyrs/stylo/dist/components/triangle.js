import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';

const triangleCss = ":host(.top) div.triangle{bottom:unset;top:0;transform:rotate(180deg) translate(50%, 100%)}div.triangle{z-index:1;--triangle-width:var(--stylo-triangle-width, 22px);--triangle-half-width:calc(var(--triangle-width) / 2);--triangle-start:calc(var(--stylo-toolbar-triangle-center) - var(--triangle-half-width));position:absolute;width:0;height:0;bottom:0;left:var(--triangle-start, var(--stylo-toolbar-triangle-start));transform:translate(0, 100%);background:transparent;border-left:var(--triangle-half-width) solid transparent;border-right:var(--triangle-half-width) solid transparent;border-top:var(--triangle-half-width) solid var(--stylo-background, var(--white));filter:drop-shadow(var(--stylo-triangle-drop-shadow))}";

const Separator = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.mobile = undefined;
  }
  render() {
    if (this.mobile) {
      return undefined;
    }
    return h("div", { class: "triangle" });
  }
  static get style() { return triangleCss; }
}, [1, "stylo-toolbar-triangle", {
    "mobile": [4]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["stylo-toolbar-triangle"];
  components.forEach(tagName => { switch (tagName) {
    case "stylo-toolbar-triangle":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, Separator);
      }
      break;
  } });
}
defineCustomElement();

export { Separator as S, defineCustomElement as d };

//# sourceMappingURL=triangle.js.map