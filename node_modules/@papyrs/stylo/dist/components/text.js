import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { i as i18n } from './i18n.store.js';
import { d as defineCustomElement$1 } from './button.js';

const actionBold = {
  cmd: 'style',
  detail: {
    style: 'font-weight',
    value: 'bold',
    initial: (element) => element && element.style['font-weight'] === 'bold'
  }
};
const actionItalic = {
  cmd: 'style',
  detail: {
    style: 'font-style',
    value: 'italic',
    initial: (element) => element && element.style['font-style'] === 'italic'
  }
};
const actionUnderline = {
  cmd: 'style',
  detail: {
    style: 'text-decoration',
    value: 'underline',
    initial: (element) => element && element.style['text-decoration'] === 'underline'
  }
};
const actionStrikeThrough = {
  cmd: 'style',
  detail: {
    style: 'text-decoration',
    value: 'line-through',
    initial: (element) => element && element.style['text-decoration'] === 'line-through'
  }
};

const textCss = ":host{display:inline-flex;--light:#f4f5f8;--light-contrast:#000000;--medium:#6e6d6f;--medium-contrast:#000000;--black:#000000;--black-contrast:#ffffff;--white:#ffffff;--white-contrast:#000000;--highlight:#3880ff;--highlight-rgb:56, 128, 255;--highlight-contrast:#ffffff}stylo-toolbar-button{margin:0 2px}stylo-toolbar-button.italic span{font-style:italic}stylo-toolbar-button.underline.active span{border-bottom:1px solid var(--stylo-toolbar-button-color-active, var(--highlight))}stylo-toolbar-button.underline span{border-bottom:1px solid var(--stylo-toolbar-button-color, black)}";

const Text = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.execCommand = createEvent(this, "execCommand", 7);
    this.disabledTitle = false;
  }
  styleBold($event) {
    $event.stopPropagation();
    this.execCommand.emit(actionBold);
  }
  styleItalic($event) {
    $event.stopPropagation();
    this.execCommand.emit(actionItalic);
  }
  styleUnderline($event) {
    $event.stopPropagation();
    this.execCommand.emit(actionUnderline);
  }
  styleStrikeThrough($event) {
    $event.stopPropagation();
    this.execCommand.emit(actionStrikeThrough);
  }
  render() {
    return (h(Host, null, h("stylo-toolbar-button", { label: i18n.state.toolbar.bold, onAction: ($event) => this.styleBold($event.detail), disableAction: this.disabledTitle, cssClass: this.bold ? 'active' : undefined, class: "bold" }, h("span", null, "B")), h("stylo-toolbar-button", { label: i18n.state.toolbar.italic, onAction: ($event) => this.styleItalic($event.detail), cssClass: this.italic ? 'active' : undefined, class: "italic" }, h("span", null, "I")), h("stylo-toolbar-button", { label: i18n.state.toolbar.underline, onAction: ($event) => this.styleUnderline($event.detail), cssClass: this.underline ? 'active' : undefined, class: this.underline ? 'active underline' : 'underline' }, h("span", null, "U")), h("stylo-toolbar-button", { label: i18n.state.toolbar.strikethrough, onAction: ($event) => this.styleStrikeThrough($event.detail), cssClass: this.strikethrough ? 'active' : undefined, class: "strikethrough" }, h("span", { style: { 'text-decoration': 'line-through' } }, "S"))));
  }
  static get style() { return textCss; }
}, [1, "stylo-toolbar-text", {
    "disabledTitle": [4, "disabled-title"],
    "bold": [4],
    "italic": [4],
    "underline": [4],
    "strikethrough": [4]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["stylo-toolbar-text", "stylo-toolbar-button"];
  components.forEach(tagName => { switch (tagName) {
    case "stylo-toolbar-text":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, Text);
      }
      break;
    case "stylo-toolbar-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}
defineCustomElement();

export { Text as T, actionUnderline as a, actionItalic as b, actionBold as c, defineCustomElement as d };
