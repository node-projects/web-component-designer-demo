import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { c as configStore } from './config.store.js';
import { c as containerStore } from './container.store.js';
import { i as i18n } from './i18n.store.js';
import { r as renderIcon } from './icon.utils.js';
import { f as findParagraph, a as toHTMLElement } from './paragraph.utils.js';
import { d as defineCustomElement$2 } from './button.js';
import { d as defineCustomElement$1 } from './triangle.js';

const menusCss = ":host{display:flex;justify-content:center;align-items:center;position:absolute;top:var(--menu-top);left:50%;transform:translate(-50%, calc(-100% - 16px));--light:#f4f5f8;--light-contrast:#000000;--medium:#6e6d6f;--medium-contrast:#000000;--black:#000000;--black-contrast:#ffffff;--white:#ffffff;--white-contrast:#000000;--highlight:#3880ff;--highlight-rgb:56, 128, 255;--highlight-contrast:#ffffff;--box-shadow:0 4px 16px 0 rgba(0, 0, 0, 0.12);box-shadow:var(--stylo-box-shadow, var(--box-shadow));border:var(--stylo-border);background:var(--stylo-background, var(--white));color:var(--stylo-color, var(--white-contrast));border-radius:var(--stylo-border, 4px);padding:var(--stylo-toolbar-padding, 0 8px);z-index:var(--stylo-toolbar-zindex, 1)}div.icon{display:flex;flex-direction:column}";

const Menus = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.menuActivated = createEvent(this, "menuActivated", 7);
    this.onKeyDown = () => {
      this.hide();
    };
    this.top = undefined;
    this.menu = undefined;
  }
  componentDidLoad() {
    this.destroyListener = containerStore.onChange('ref', () => {
      this.removeContainerListener();
      this.addContainerListener();
    });
    this.addContainerListener();
  }
  disconnectedCallback() {
    var _a;
    this.removeContainerListener();
    (_a = this.destroyListener) === null || _a === void 0 ? void 0 : _a.call(this);
  }
  addContainerListener() {
    var _a;
    (_a = containerStore.state.ref) === null || _a === void 0 ? void 0 : _a.addEventListener('keydown', this.onKeyDown, { passive: true });
  }
  removeContainerListener() {
    var _a;
    (_a = containerStore.state.ref) === null || _a === void 0 ? void 0 : _a.removeEventListener('keydown', this.onKeyDown);
  }
  onResize() {
    this.hide();
  }
  onClick({ target }) {
    var _a, _b;
    const paragraph = findParagraph({
      element: target,
      container: containerStore.state.ref
    });
    this.paragraph = toHTMLElement(paragraph);
    if (!this.paragraph) {
      this.hide();
      return;
    }
    this.menuActivated.emit({ paragraph: this.paragraph });
    this.menu = (_a = configStore.state.menus) === null || _a === void 0 ? void 0 : _a.find(({ match }) => match({ paragraph: this.paragraph }));
    this.top = this.menu && ((_b = this.paragraph) === null || _b === void 0 ? void 0 : _b.offsetTop);
  }
  async selectMenuAction({ action }) {
    if (!this.paragraph) {
      this.hide();
      return;
    }
    await action({ paragraph: this.paragraph });
    this.hide();
  }
  hide() {
    this.paragraph = undefined;
    this.menu = undefined;
    this.top = undefined;
  }
  render() {
    const style = this.top === undefined ? { display: 'none' } : { '--menu-top': `${this.top}px` };
    return (h(Host, { style: style }, this.renderMenu(), h("stylo-toolbar-triangle", { style: {
        '--stylo-toolbar-triangle-center': `50%`
      } })));
  }
  renderMenu() {
    var _a;
    return (_a = this.menu) === null || _a === void 0 ? void 0 : _a.actions.map((action) => this.renderAction(action));
  }
  renderAction(action) {
    var _a, _b;
    const { icon: iconSrc, text } = action;
    const icon = renderIcon(iconSrc);
    return (h("stylo-toolbar-button", { onAction: async () => await this.selectMenuAction(action), label: (_b = (_a = i18n.state.menus[text]) !== null && _a !== void 0 ? _a : i18n.state.custom[text]) !== null && _b !== void 0 ? _b : text }, icon ? icon : h("div", { class: "icon", innerHTML: iconSrc })));
  }
  static get style() { return menusCss; }
}, [1, "stylo-menus", {
    "top": [32],
    "menu": [32]
  }, [[9, "resize", "onResize"], [5, "click", "onClick"]]]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["stylo-menus", "stylo-toolbar-button", "stylo-toolbar-triangle"];
  components.forEach(tagName => { switch (tagName) {
    case "stylo-menus":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, Menus);
      }
      break;
    case "stylo-toolbar-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "stylo-toolbar-triangle":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}
defineCustomElement();

export { Menus as M, defineCustomElement as d };

//# sourceMappingURL=menus.js.map