import { c as createStore } from './index2.js';
import { t as transformParagraph, c as createEmptyElement } from './paragraph.utils.js';
import { D as DEFAULT_PALETTE } from './palette.js';

const code = {
  text: 'code',
  icon: 'code',
  createParagraphs: async ({ container, paragraph }) => {
    transformParagraph({
      elements: [createEmptyElement({ nodeName: 'code' }), createEmptyElement({ nodeName: 'div' })],
      paragraph,
      container
    });
  }
};

const h1 = {
  text: 'huge_title',
  icon: `<span class='placeholder'>H1</span>`,
  createParagraphs: async ({ container, paragraph }) => transformParagraph({
    elements: [createEmptyElement({ nodeName: 'h1' })],
    paragraph,
    container
  })
};

const h2 = {
  text: 'large_title',
  icon: `<span class='placeholder'>H2</span>`,
  createParagraphs: async ({ container, paragraph }) => transformParagraph({
    elements: [createEmptyElement({ nodeName: 'h2' })],
    paragraph,
    container
  })
};

const h3 = {
  text: 'small_title',
  icon: `<span class='placeholder'>H3</span>`,
  createParagraphs: async ({ container, paragraph }) => transformParagraph({
    elements: [createEmptyElement({ nodeName: 'h3' })],
    paragraph,
    container
  })
};

const blockquote = {
  text: 'blockquote',
  icon: 'blockquote',
  createParagraphs: async ({ container, paragraph }) => transformParagraph({
    elements: [createEmptyElement({ nodeName: 'blockquote' })],
    paragraph,
    container
  })
};

const hr = {
  text: 'separator',
  icon: 'hr',
  createParagraphs: async ({ container, paragraph }) => {
    const hr = document.createElement('hr');
    transformParagraph({
      elements: [hr, createEmptyElement({ nodeName: 'div' })],
      paragraph,
      container,
      focus: 'last'
    });
  }
};

const img = {
  text: 'image',
  icon: 'img',
  files: {
    accept: 'image/x-png,image/jpeg,image/gif,image/svg+xml,image/webp',
    multiple: false
  },
  createParagraphs: async ({ container, paragraph, files }) => {
    const URL = window.URL || window.webkitURL;
    const imgUrl = URL.createObjectURL(files[0]);
    const img = document.createElement('img');
    img.src = imgUrl;
    img.setAttribute('loading', 'lazy');
    const emptyDiv = createEmptyElement({ nodeName: 'div' });
    transformParagraph({
      elements: [img, emptyDiv],
      paragraph,
      container,
      focus: 'last'
    });
  }
};

const createListItem = () => {
  const item = document.createElement('li');
  item.innerHTML = '\u200B';
  return item;
};
const ul = {
  text: 'unordered_list',
  icon: 'ul',
  createParagraphs: async ({ container, paragraph }) => {
    const ul = document.createElement('ul');
    ul.append(createListItem());
    await transformParagraph({
      elements: [ul, createEmptyElement({ nodeName: 'div' })],
      paragraph,
      container
    });
  }
};
const ol = {
  text: 'ordered_list',
  icon: 'ol',
  createParagraphs: async ({ container, paragraph }) => {
    const ol = document.createElement('ol');
    ol.append(createListItem());
    await transformParagraph({
      elements: [ol, createEmptyElement({ nodeName: 'div' })],
      paragraph,
      container
    });
  }
};

const DEFAULT_PLUGINS = [h1, h2, h3, ul, ol, blockquote, img, code, hr];
const DEFAULT_TOOLBAR = {
  palette: DEFAULT_PALETTE,
  command: 'native',
  style: {
    list: false,
    align: true,
    fontSize: true,
    backgroundColor: true
  }
};
const DEFAULT_PLACEHOLDERS = ['div', 'p', 'span'];
const DEFAULT_TEXT_PARAGRAPHS = ['h1', 'h2', 'h3', 'div', 'p', 'blockquote'];
const DEFAULT_EXCLUDE_ATTRIBUTES = [
  'placeholder',
  'class',
  'spellcheck',
  'contenteditable',
  'data-gramm',
  'data-gramm_id',
  'data-gramm_editor',
  'data-gr-id',
  'autocomplete'
];
const DEFAULT_PARAGRAPH_IDENTIFIER = 'paragraph_id';
const DEFAULT_ATTRIBUTES = {
  paragraphIdentifier: DEFAULT_PARAGRAPH_IDENTIFIER,
  exclude: [...DEFAULT_EXCLUDE_ATTRIBUTES, DEFAULT_PARAGRAPH_IDENTIFIER]
};
const { state, onChange } = createStore({
  plugins: DEFAULT_PLUGINS,
  toolbar: DEFAULT_TOOLBAR,
  placeholders: DEFAULT_PLACEHOLDERS,
  textParagraphs: DEFAULT_TEXT_PARAGRAPHS,
  menus: undefined,
  attributes: DEFAULT_ATTRIBUTES
});
const configStore = { state, onChange };

export { DEFAULT_PLUGINS as D, h2 as a, h3 as b, code as c, blockquote as d, hr as e, configStore as f, DEFAULT_TOOLBAR as g, h1 as h, img as i, DEFAULT_PLACEHOLDERS as j, DEFAULT_TEXT_PARAGRAPHS as k, DEFAULT_EXCLUDE_ATTRIBUTES as l, DEFAULT_PARAGRAPH_IDENTIFIER as m, ol as o, ul as u };
