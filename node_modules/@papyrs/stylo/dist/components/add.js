import { h, HTMLElement, createEvent, Host, proxyCustomElement } from '@stencil/core/internal/client';
import { f as findParagraph, a as toHTMLElement, i as isParagraphEmpty, b as isParagraphNotEditable, d as focusParagraph, c as createEmptyElement, g } from './paragraph.utils.js';
import { a } from './chunk-MPAE6ITZ.js';
import { c as configStore } from './config.store.js';
import { c as containerStore } from './container.store.js';
import { i as i18n } from './i18n.store.js';
import { g as getSelection } from './selection.utils.js';

const IconAdd = () => (h("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512" },
  h("path", { fill: "none", stroke: "currentColor", "stroke-linecap": "round", "stroke-linejoin": "round", "stroke-width": "32", d: "M256 112v288M400 256H112" })));

const addCss = ":host{display:block;position:absolute;top:var(--actions-top);left:var(--stylo-add-left, 8px);transition:top 0.1s ease;--light:#f4f5f8;--light-contrast:#000000;--medium:#6e6d6f;--medium-contrast:#000000;--black:#000000;--black-contrast:#ffffff;--white:#ffffff;--white-contrast:#000000;--highlight:#3880ff;--highlight-rgb:56, 128, 255;--highlight-contrast:#ffffff}button{display:flex;position:relative;isolation:isolate;overflow:hidden;background:transparent;border:none;outline:none;cursor:pointer;transition:color 0.25s ease-out, background 0.25s ease-out, transform 0.15s ease-out;flex-direction:column;justify-content:center;align-items:center;border-radius:50%;width:1.4rem;height:1.4rem;color:var(--medium)}button:active{box-shadow:none;transform:translateX(1px) translateY(1px)}button:hover,button:focus{color:var(--light-contrast)}svg{width:1.2rem;height:1.2rem}";

let Add = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.listPlugins = createEvent(this, "listPlugins", 7);
    this.hidePlugins = createEvent(this, "hidePlugins", 7);
    this.initParagraph = (target) => {
      if (!target) {
        this.hide();
        return;
      }
      const paragraph = findParagraph({
        element: target,
        container: containerStore.state.ref
      });
      this.paragraph = toHTMLElement(paragraph);
      if (!this.paragraph) {
        this.hide();
        return;
      }
      this.top = this.paragraph.offsetTop;
      this.addPlaceholder();
    };
  }
  componentDidLoad() {
    window === null || window === void 0 ? void 0 : window.addEventListener('resize', () => this.hide());
  }
  disconnectedCallback() {
    window === null || window === void 0 ? void 0 : window.removeEventListener('resize', () => this.hide());
  }
  /**
   * When "enter" is pressed, create a new paragraph and select it.
   */
  onKeyDown({ code }) {
    if (!['ArrowDown', 'ArrowUp', 'Enter'].includes(code)) {
      this.removePlaceholder();
    }
    if (!['Enter'].includes(code)) {
      return;
    }
  }
  onKeyUp({ code }) {
    var _a;
    if (!['ArrowDown', 'ArrowUp', 'Enter'].includes(code)) {
      if (this.top !== undefined) {
        this.hide();
      }
      return;
    }
    if (['ArrowDown', 'ArrowUp'].includes(code)) {
      this.initParagraph((_a = getSelection(containerStore.state.ref)) === null || _a === void 0 ? void 0 : _a.anchorNode);
      return;
    }
  }
  /**
   * If user press "/" we want to display the list of plugins.
   */
  onBeforeInput({ data }) {
    if (!['/'].includes(data)) {
      this.hidePlugins.emit();
      return;
    }
    if (!this.paragraph || !this.paragraph.isConnected) {
      return;
    }
    if (!isParagraphEmpty({ paragraph: this.paragraph })) {
      this.hidePlugins.emit();
      return;
    }
    this.focusListPlugins();
  }
  /**
   * Hide or display the component, the "plus" button.
   */
  onClick({ target }) {
    this.initParagraph(target);
  }
  onAddParagraphs({ detail: addedParagraphs }) {
    this.initParagraph(addedParagraphs[0]);
  }
  hide() {
    if (a()) {
      return;
    }
    this.top = undefined;
  }
  addPlaceholder() {
    var _a;
    this.removePlaceholder();
    if (!isParagraphEmpty({ paragraph: this.paragraph })) {
      return;
    }
    if (isParagraphNotEditable({ paragraph: this.paragraph })) {
      return;
    }
    if (!configStore.state.placeholders.includes((_a = this.paragraph) === null || _a === void 0 ? void 0 : _a.nodeName.toLowerCase())) {
      return;
    }
    const css = window.getComputedStyle(this.paragraph, ':before');
    if (!['""', 'none'].includes(css.getPropertyValue('content'))) {
      // An external source use :before to style this paragraph
      return;
    }
    setTimeout(() => this.paragraph.setAttribute('placeholder', i18n.state.add.placeholder), 150);
  }
  removePlaceholder() {
    var _a;
    const placeholders = (_a = containerStore.state.ref) === null || _a === void 0 ? void 0 : _a.querySelectorAll('[placeholder]');
    placeholders === null || placeholders === void 0 ? void 0 : placeholders.forEach((element) => element.removeAttribute('placeholder'));
  }
  selectPlugins($event) {
    if (!this.paragraph || !containerStore.state.ref) {
      return;
    }
    $event.stopPropagation();
    if (isParagraphEmpty({ paragraph: this.paragraph }) &&
      !isParagraphNotEditable({ paragraph: this.paragraph })) {
      this.focusListPlugins();
      return;
    }
    focusParagraph({ paragraph: this.paragraph });
    const onRender = (mutations, observer) => {
      observer.disconnect();
      const addedNodes = mutations.reduce((acc, { addedNodes }) => [...acc, ...Array.from(addedNodes)], []);
      const div = addedNodes.find((node) => node.nodeName.toLowerCase() === 'div');
      g(div);
      this.listPlugins.emit(div);
    };
    const docObserver = new MutationObserver(onRender);
    docObserver.observe(containerStore.state.ref, { childList: true, subtree: true });
    const div = createEmptyElement({ nodeName: 'div' });
    this.paragraph.after(div);
    this.hide();
  }
  focusListPlugins() {
    focusParagraph({ paragraph: this.paragraph });
    this.listPlugins.emit(this.paragraph);
  }
  render() {
    const style = this.top === undefined ? { display: 'none' } : { '--actions-top': `${this.top}px` };
    return (h(Host, { style: style }, h("button", { type: "button", "aria-label": i18n.state.add.add_element, onClick: ($event) => this.selectPlugins($event), onKeyDown: ($event) => $event.stopPropagation(), onMouseDown: ($event) => $event.stopPropagation(), onTouchStart: ($event) => $event.stopPropagation() }, h(IconAdd, null))));
  }
  static get style() { return addCss; }
};
Add = /*@__PURE__*/ proxyCustomElement(Add, [1, "stylo-add", {
    "top": [32]
  }, [[5, "keydown", "onKeyDown"], [5, "keyup", "onKeyUp"], [5, "beforeinput", "onBeforeInput"], [5, "click", "onClick"], [5, "addParagraphs", "onAddParagraphs"]]]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["stylo-add"];
  components.forEach(tagName => { switch (tagName) {
    case "stylo-add":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, Add);
      }
      break;
  } });
}
defineCustomElement();

export { Add as A, defineCustomElement as d };
