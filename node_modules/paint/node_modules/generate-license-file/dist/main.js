"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const file_utils_1 = require("./utils/file.utils");
const license_checker_1 = require("license-checker");
const fs = __importStar(require("fs"));
const os = __importStar(require("os"));
const BULLET = " - ";
const PREFIX = "The following NPM packages may be included in this product:" + os.EOL + os.EOL;
const MIDFIX = os.EOL + "These packages each contain the following license and notice below:" + os.EOL + os.EOL;
const SUFFIX = os.EOL + os.EOL + "-----------" + os.EOL + os.EOL;
const FOOTER = "This file was generated with generate-license-file! https://www.npmjs.com/package/generate-license-file";
const initAsync = util_1.promisify(license_checker_1.init);
const UTF8 = "utf-8";
/**
 * Scans the project found at the given path and creates a license file at the given output location
 * @param path A path to a directory containing a package.json
 * @param outputPath A file path for the resulting license file
 */
function generateLicenseFile(path, outputPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const licenses = yield getProjectLicenses(path);
        const stream = fs.createWriteStream(outputPath, {
            encoding: "utf-8",
            flags: "w+"
        });
        stream.once("open", () => {
            for (const license of licenses) {
                stream.write(PREFIX);
                for (const dep of license.dependencies) {
                    stream.write(BULLET);
                    stream.write(dep);
                    stream.write(os.EOL);
                }
                stream.write(MIDFIX);
                stream.write(license.content.trim());
                stream.write(SUFFIX);
            }
            stream.end(FOOTER);
        });
    });
}
exports.generateLicenseFile = generateLicenseFile;
/**
 * @param path Directory containing the project's package.json (relative or absolute).
 * @returns Array of `ILicense`s each containing the license content and respective dependencies
 */
function getProjectLicenses(path) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const dependencyLicenses = new Map();
            if (!(yield file_utils_1.doesFolderExist(path))) {
                throw new Error("Cannot find directory " + path);
            }
            const file = yield initAsync({
                start: path,
                production: true
            });
            for (const [dependencyName, dependencyValue] of Object.entries(file)) {
                if (dependencyValue.licenseFile) {
                    const license = yield file_utils_1.readFileAsync(dependencyValue.licenseFile, { encoding: UTF8 });
                    if (!dependencyLicenses.has(license)) {
                        dependencyLicenses.set(license, {
                            content: license,
                            dependencies: []
                        });
                    }
                    (_a = dependencyLicenses.get(license)) === null || _a === void 0 ? void 0 : _a.dependencies.push(dependencyName);
                }
            }
            return Array.from(dependencyLicenses.values());
        }
        catch (error) {
            console.error(error);
            return Promise.reject();
        }
    });
}
exports.getProjectLicenses = getProjectLicenses;
