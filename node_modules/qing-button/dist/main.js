var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, css, LitElement } from '/web-component-designer-demo/node_modules/lit/index.js';
import { property, customElement } from '/web-component-designer-demo/node_modules/lit/decorators.js';
const selectedButtonClass = 'selected';
let QingButton = class QingButton extends LitElement {
    constructor() {
        super(...arguments);
        this.disabled = false;
        this.canSelect = false;
        this.disableSelectedStyle = false;
        this.href = '';
        this.btnStyle = '';
        this.selected = false;
        this.buttonElement = null;
    }
    static get styles() {
        return [
            css `
        :host {
          box-sizing: border-box;
          display: inline-block;
          user-select: none;
        }
        button {
          width: 100%;
          height: 100%;
          background-color: #e7e7e7;
          color: black;
          border: 0;
          border-radius: 0;
          text-align: center;
          text-decoration: none;
          display: inline-block;
          cursor: pointer;
          font-size: 1rem;
          padding: 0.6rem 0.9rem;
          transition: all 0.3s ease 0s;
        }
        button:hover {
          opacity: 0.8;
        }
        button:active,
        button.selected {
          filter: brightness(80%);
        }
        button:disabled {
          pointer-events: none;
          opacity: 0.6;
        }
        button:focus {
          box-shadow: inset 0 0 0 0.2rem var(--button-outline-color, #8dc3eb);
          outline: none;
        }
      `,
        ];
    }
    firstUpdated() {
        if (!this.shadowRoot) {
            throw new Error('Unexpected undefined shadowRoot');
        }
        this.buttonElement = this.shadowRoot.querySelector('button');
    }
    render() {
        return html `
      <button
        class=${this.selected && !this.disableSelectedStyle ? selectedButtonClass : ''}
        part="button"
        ?disabled=${this.disabled}
        ?autofocus=${this.autofocus}
        @click=${this.handleClick}>
        <slot></slot>
      </button>
    `;
    }
    focus() {
        if (this.buttonElement) {
            this.buttonElement.focus();
        }
    }
    handleClick(e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        if (this.href) {
            window.location.href = this.href;
            return;
        }
        if (this.canSelect) {
            this.selected = !this.selected;
            this.dispatchEvent(new CustomEvent('check'));
        }
        this.dispatchEvent(new CustomEvent('click'));
    }
};
__decorate([
    property({ type: Boolean })
], QingButton.prototype, "disabled", void 0);
__decorate([
    property({ type: Boolean })
], QingButton.prototype, "canSelect", void 0);
__decorate([
    property({ type: Boolean })
], QingButton.prototype, "disableSelectedStyle", void 0);
__decorate([
    property({ type: String })
], QingButton.prototype, "href", void 0);
__decorate([
    property({ type: String })
], QingButton.prototype, "btnStyle", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], QingButton.prototype, "selected", void 0);
QingButton = __decorate([
    customElement('qing-button')
], QingButton);
export { QingButton };
export default QingButton;
//# sourceMappingURL=main.js.map